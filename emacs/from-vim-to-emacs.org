Here is a list of stuff I set out to learn as I began using emacs after using vim for three years

* Stuff I expect from an editor
** File explorer
Most editors have a tree-like view of files.
Here we have a few options, the ones that stand out at first are:
- [[https://github.com/jaypei/emacs-neotree][Neotree]]: Simple, reminds me of NERDTree from vim
- [[https://github.com/Alexander-Miller/treemacs#treemacs---a-tree-layout-file-explorer-for-emacs][Treemacs]]: It's also compared with NERDTree but feels .. fancier?
For a simpler directory view, similar to =ls=:
- [[https://www.emacswiki.org/emacs/DiredMode][dired]] (directory editor)
  - This is similar to vim's [[https://www.vim.org/scripts/script.php?script_id=1075][netrw]] (often paired with [[https://github.com/tpope/vim-vinegar][vinegar]])
** File picker
Often it's preferable to open a prompt and type to search for a file.
There is the built-in =find-file= command which is decent, but to search in sub-folders it requires you tab-complete, which slows file search down--but it does offer more precise search!
I think the go-to here is to [[https://github.com/bbatsov/projectile][projectile]] which is "Project Interaction Library for Emacs"
** Autocomplete as I type
Emacs has built-in =completion-at-point= functionaliy
I find [[https://company-mode.github.io/][company]] to be indispensable as it plugs in with various tools for completion like with various programming tools
** Project-wide search (ag, rg, etc)
Searching for specific text within a project can be achieved with programs like grep and similar.
I've settled on using [[https://github.com/Wilfred/deadgrep][deadgrep]] which provides a nice list of results that you can visit individually after searching.
** Version control
I use [[https://git-scm.com/][git]] for version control, and it's most often interacted with via the command line with commands like =git add=, =git status=, etc. Some users use a GUI tool instead.
In vim land I know many use [[https://github.com/tpope/vim-fugitive][vim-fugitive]] and swear by it.
Personally, I used [[https://github.com/jesseduffield/lazygit][lazygit]] in a separate terminal window to great effect and felt it was a game changer.
However, in emacs we have [[https://magit.vc/][magit]] which, too, is a game changer.
** Syntax highlighting
Traditionally, text editors/IDEs used regular expressions per language type to highlight different syntaxes. And most language plugins (minor modes) for emacs provide this.
More recently, [[https://tree-sitter.github.io/tree-sitter/][treesitter]] came onto the scene which is a better approach to identifying languag syntaxes.
Between the two approaches, treesitter has fewer color scheme support for syntax highlighting--but this is changing with time.
** Vim emulation
The answer is EVIL mode: https://www.emacswiki.org/emacs/Evil
Many programs offer keyboard navigation that was inspired by vim, like Gmail's =jk= shortcuts for moving down or up
Similarly, many text editors/IDEs offer something similar for file navigation, each with varying levels of implementation.
I would wager that EVIL mode is as close to a complete implementation of vim keybindings that exist anywhere--outside of vim itself, that is.

*** surround.vim equivalent
The ability to easily wrap things in quotes/parentheses/brackets
See: [[https://github.com/emacs-evil/evil-surround][evil-surround]]

*** sneak.vim equivalent
The ability to quickly navigate to any text you see
See: [[https://github.com/abo-abo/avy][avy]]
Similar to [[https://github.com/justinmk/vim-sneak][sneak]] or [[https://github.com/easymotion/vim-easymotion][easymotion]], I've bound =s= to =evil-avy-goto-char-2=

* Editor configuration
Your configuration it done via =init.el= and it's all written in =elisp=, like this:
#+begin_src emacs-lisp
(message "Hello, World!")
#+end_src
If you haven't seen lisp before, there's a lot of parentheses and this is how you run a function
You can use ~M-x customize~ to interactively set a variety of settings, all of which will get saved to ~init.el~
I try to not edit ~init.el~ directly since it's often updated interactively and instead write my configurations to ~my-org-init.org~ and I have this line at the start of my ~init.el~ which at startup converts my org file to a ~.el~ file so that emacs can use it for configuration while allowing me to document some notes in a markdown-esque format with plain text as well as code blocks
#+begin_src emacs-lisp
(require 'org)
(org-babel-load-file
 (expand-file-name "~/dotfiles/emacs/my-org-init.org"))
#+end_src
On the topic of ~org-mode~ .. you can learn more about it [[https://orgmode.org/][here]] (be warned, it's game a game changer)

* Package manager
Packages can be installed with the default ~package-install~ command (accessed with ~M-x~)
I like using the [[https://github.com/jwiegley/use-package][use-package]] package for managing the installing of plugins and managing their configurations, here's an example of installing a snippet plugin and adding some configurations
#+begin_src emacs-lisp

  (use-package yasnippet
    :bind (:map evil-insert-state-map
                ("C-y" . yas-expand))
    :config
    (yas-global-mode 1)
    (setq yas-snippet-dirs '("~/.emacs.d/snippets")))

#+end_src

* Code editing
1) emmet?
2) Intellisense / LSP capabilities?
   - Depends. There's stuff like lsp-mode and you can also use something like tide for javascript

* Visuals
1) statusline?
2) doom-modeline
3) icons?
4) Syntax highlighting
   * Colorscheme
5) Hex/RGBA/HSL color previews
6) Whichkey equivalent?
   - there's a vim package for this but this actually came from an emacs package

* Terminology to know
1) ~C-x C-c~ to quit emacs
2) ~M-x~ execute command
3) ~C-g~ to escape
4) ~C-h ?~ about help
5) ~C-h t~ opens the emacs tutorial
6) ~C-h k [key or series of keys]~ opens help about that key or string of keys
7) ~C-v~ minibuffer: scroll v one screen
8) ~M-v~ minibuffer: scroll ^ one screen
9) ~C-s~ start incremental search / go to next match
10) ~C-x 0~ kill current window
