#+title: My emacs configuration via org mode!
#+author: Me. Your friendly neighborhood web developer

* Categories of config
** Base layer
*** Package management tooling
*** Miscellaneous Settings
**** Garbage collection
#+begin_src emacs-lisp
  ;; Make startup faster by reducing the frequency of garbage
  ;; collection.  The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; The rest of the init file.

  ;; Make gc pauses faster by decreasing the threshold.
  ;; (setq gc-cons-threshold (* 2 1000 1000))

  ;; The default is 800 kilobytes.  Measured in bytes.
  ;; (setq gc-cons-percentage 0.6)
  ;; (setq gc-cons-threshold most-positive-fixnum)

  (defun display-startup-time ()
      "Display startup time."
      (message "Emacs loaded in %s with %d garbage collections."
              (format "%.2f seconds"
                      (float-time
                      (time-subtract after-init-time before-init-time)))
              gcs-done))

  (add-hook 'emacs-startup-hook #'display-startup-time)
#+end_src
**** Basic settings
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
  (setq auto-save-default nil)

  (setq backup-directory-alist '(("." . "~/.config/emacs/.saves")))

  (setq inhibit-startup-message t)

  (defalias 'yes-or-no-p #'y-or-n-p)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)

  (set-face-attribute 'default nil :font "Source Code Pro" :height 130)

  (save-place-mode 1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (column-number-mode)

  (show-paren-mode 1)
  (electric-pair-mode 1)

  (custom-set-variables
      '(initial-frame-alist (quote ((fullscreen . maximized)))))

  ;; Suppress warnings about cl being deprecated
  (setq byte-compile-warnings '(cl-functions))

  (use-package posframe)
#+end_src
**** Modeline changes
#+begin_src emacs-lisp
  (use-package minions
    :config (minions-mode))
#+end_src
**** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :init
    (setq doom-themes-treemacs-theme "doom-colors")
    :config
    (load-theme 'doom-gruvbox t)
    (doom-themes-visual-bell-config))
#+end_src
**** Line number settings
#+begin_src emacs-lisp
  (global-hl-line-mode 1)

  (defun sal-enable-linum ()
    (interactive)
    (if (eq nil display-line-numbers)
        (setq display-line-numbers 'relative)
      (message "Linum mode set")))

  (add-hook 'prog-mode-hook 'sal-enable-linum)

  (global-linum-mode -1)

  (setq display-line-numbers 'relative)
#+end_src
**** Whitespace management
#+begin_src emacs-lisp
  (whitespace-mode)
  (use-package whitespace-cleanup-mode
    :config
    (global-whitespace-cleanup-mode))
#+end_src
*** General
#+begin_src emacs-lisp
  (defun sal-switch-linum-mode ()
    (interactive)
    (if (eq 'relative display-line-numbers)
        (setq display-line-numbers 'absolute)
      (setq display-line-numbers 'relative)))

  (use-package general
    :config
    (general-create-definer leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")
      ;; Toggles
      (leader-keys
          "T"  '(:ignore t :which-key "toggles")
          "Tn" '(sal-switch-linum-mode :which-key "change linum mode")))
#+end_src
*** Helpful to improve help docs
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key))

  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

  (leader-keys
    "h" 'help-command)
#+end_src
*** EVIL
**** Requirements
#+begin_src emacs-lisp
  (use-package undo-fu :config (global-undo-tree-mode -1))
  (use-package origami :config (global-origami-mode))
  (use-package drag-stuff :config (drag-stuff-mode t))
#+end_src
**** The evil package
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (add-hook 'evil-local-mode-hook 'turn-on-undo-tree-mode)
    :custom
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t)
    (evil-undo-system 'undo-fu)
    :config
    (evil-set-initial-state 'Custom-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (evil-mode 1))

  (define-key evil-normal-state-map (kbd "u") 'undo-fu-only-undo)
  (define-key evil-normal-state-map (kbd "\C-r") 'undo-fu-only-redo)
  (define-key evil-normal-state-map (kbd "U") 'undo-fu-only-redo)

  (define-key evil-normal-state-map (kbd "gm") 'evil-search-word-forward)

  (define-key evil-visual-state-map (kbd "J") 'drag-stuff-down)
  (define-key evil-visual-state-map (kbd "K") 'drag-stuff-up)

  (define-key evil-normal-state-map (kbd "gl") 'evil-end-of-line)
  (define-key evil-normal-state-map (kbd "gh") 'evil-beginning-of-line)

  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

  (defun insert-line-below ()
    "Insert an empty line below the current line."
    (interactive)
    (save-excursion
      (end-of-line)
      (open-line 1)))

  (defun insert-line-above ()
    "Insert an empty line above the current line."
    (interactive)
    (save-excursion
      (end-of-line 0)
      (open-line 1)))

  (define-key evil-normal-state-map (kbd "[ SPC") 'insert-line-above)
  (define-key evil-normal-state-map (kbd "] SPC") 'insert-line-below)
#+end_src
**** Evil Collection
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-want-unimpaired-p nil))

  (when (require 'evil-collection nil t)
    (evil-collection-init))
#+end_src
**** Evil leader
#+begin_src emacs-lisp
  (use-package evil-leader
    :config (global-evil-leader-mode))

  (evil-leader/set-leader "SPC")

  (leader-keys
    "qq" 'save-buffers-kill-terminal)

  (leader-keys
    "u" 'universal-argument)

  (leader-keys
    "cc" 'comment-line)
#+end_src
**** Evil surround
#+begin_src emacs-lisp
  (use-package evil-surround
    :config (global-evil-surround-mode 1))
#+end_src
**** Evil goggles
#+begin_src emacs-lisp
  (use-package evil-goggles
    :config
    (evil-goggles-mode)
    (setq evil-goggles-duration 0.500
          evil-goggles-blocking-duration 0.001
          evil-goggles-async-duration 0.900
          evil-goggles-enable-paste nil
          evil-goggles-enable-delete nil
          evil-goggles-enable-change nil
          evil-goggles-enable-indent nil
          evil-goggles-enable-join nil
          evil-goggles-enable-fill-and-move nil
          evil-goggles-enable-paste nil
          evil-goggles-enable-shift nil
          evil-goggles-enable-surround nil
          evil-goggles-enable-commentary nil
          evil-goggles-enable-nerd-commenter nil
          evil-goggles-enable-replace-with-register nil
          evil-goggles-enable-set-marker nil
          evil-goggles-enable-undo nil
          evil-goggles-enable-redo nil
          evil-goggles-enable-record-macro nil))
#+end_src
**** Evil nerd commenter
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter)
#+end_src
*** Hydra
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src
**** Font size Hydra
#+begin_src emacs-lisp
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (leader-keys
    "tf" '(hydra-text-scale/body :which-key "scale text"))
#+end_src
**** Scrolling Hydra
#+begin_src emacs-lisp
  (defhydra hydra-scroll-page (:timeout 4)
    "scroll the page"
    ("k" evil-scroll-up "up")
    ("j" evil-scroll-down "down")
    ("f" nil "finished" :exit t))

  (leader-keys
    "ts" '(hydra-scroll-page/body :which-key "scroll page"))
#+end_src
*** Whichkey
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src
** Something
*** Consult
#+begin_src emacs-lisp
  (use-package consult
    :config
    (setq consult-preview-key (kbd "C-\\")))

  (leader-keys
    "sf" 'consult-line)
#+end_src
*** Selectrum
#+begin_src emacs-lisp
  (load-file "~/dotfiles/emacs/conf-selectrum.el")
#+end_src
**** Embark
**** Marginalia
**** Ripgrep
*** Company mode

[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

[[https://github.com/sebastiencs/company-box][Company box]] adds some cool icons

[[https://github.com/company-mode/company-quickhelp][Company quickhelp]] adds overlay documentation for the options company provides

#+begin_src emacs-lisp
  (use-package company
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (company-tng-mode)
    (setq company-idle-delay 0
          company-minimum-prefix-length 1
          company-selection-wrap-around t))

  (use-package company-box :hook (company-mode . company-box-mode))

  (use-package pos-tip)
  (use-package company-quickhelp :config (company-quickhelp-mode))

  (eval-after-load 'company
    '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)
#+end_src

*** Terminal settings
**** VTerm
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000)
    :hook
    (vterm-mode . (lambda ()
                    (setq-local global-hl-line-mode nil))))

  (use-package multi-vterm
      :config
      (define-key vterm-mode-map [return]                      #'vterm-send-return)

      (setq vterm-keymap-exceptions nil)
      (evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
      (evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
      (evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
      (evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
      (evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
      (evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
      (evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
      (evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))

  (use-package eterm-256color
    :hook (vterm-mode . eterm-256color-mode))

  (use-package ivy)

  (use-package theme-looper)

  (defun sal-cd-project-root ()
    (cd (projectile-project-root)))

  ;; Terminal
  (leader-keys
    "t" '(:ignore t :which-key "terminal")
    "tt" (lambda ()
           (interactive)
           (sal-cd-project-root)
           (multi-vterm))
    "t/" (lambda ()
           (interactive)
           (split-window-right)
           (other-window 1)
           (sal-cd-project-root)
           (multi-vterm))
    "t-" (lambda ()
           (interactive)
           (split-window-below)
           (other-window 1)
           (sal-cd-project-root)
           (multi-vterm)))
#+end_src
**** exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src
*** Dashboard: recentf / bookmarks / MRU

#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-set-heading-icons t
          dashboard-startup-banner 'logo
          dashboard-center-content nil
          dashboard-set-navigator t
          dashboard-set-file-icons t)
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 5)
                            (projects . 5)))
    (dashboard-setup-startup-hook))
#+end_src

** Project/file management
#+begin_src emacs-lisp
  (defun show-file-name ()
    "Show the full path file name in the minibuffer."
    (interactive)
    (message (buffer-file-name))
    (kill-new (file-truename buffer-file-name)))

  (leader-keys
    "fe" 'neotree
    "fj" 'dired-jump
    "fr" 'rename-file
    "f5" 'load-file
    "fs" 'evil-write-all
    "fy" 'show-file-name
    "f.s" 'save-buffer)
#+end_src
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :bind (
           :map magit-mode-map
                ("C-n" . magit-section-forward-sibling)
                ("C-p" . magit-section-backward-sibling))
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (leader-keys
    "gs" 'magit-status)

  (defun kill-magit-diff-buffer-in-current-repo (&rest _)
    "Delete the magit-diff buffer related to the current repo"
    (let ((magit-diff-buffer-in-current-repo
           (magit-mode-get-buffer 'magit-diff-mode)))
      (kill-buffer magit-diff-buffer-in-current-repo)))
  ;;
  ;; When 'C-c C-c' is pressed in the magit commit message buffer,
  ;; delete the magit-diff buffer related to the current repo.
  ;;
  (add-hook 'git-commit-setup-hook
            (lambda ()
              (add-hook 'with-editor-post-finish-hook
                        #'kill-magit-diff-buffer-in-current-repo
                        nil t))) ; the t is important
#+end_src
*** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    (projectile-mode))

  (leader-keys
    "po" 'projectile-switch-project)
#+end_src
*** Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "c" 'find-file
      "h" 'dired-up-directory
      "l" 'dired-find-file
      ))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands
    (dired dired-jump)
    :config
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))
#+end_src
*** Tree view of folders
#+begin_src emacs-lisp
  (use-package neotree
    :defer 3
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)
          neo-hide-cursor t
          neo-window-width 30)
    :general
    (:states 'normal
             :keymaps 'neotree-mode-map
             "md" 'neotree-delete-node
             "ma" 'neotree-create-node
             "mm" 'neotree-rename-node
             "R" 'neotree-refresh
             "RET" 'neotree-enter
             "?" 'describe-mode
             "H" 'neotree-hidden-file-toggle
             "q" 'neotree-hide
             "u" 'neotree-select-up-node))
#+end_src
** Buffer management
#+begin_src emacs-lisp
  (global-set-key (kbd "C-;") 'ibuffer)

  (leader-keys
    "TAB" 'evil-switch-to-windows-last-buffer
    "br" 'rename-buffer
    "bd" 'kill-this-buffer)
#+end_src
*** Ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer-projectile)
  (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-projectile-set-filter-groups)))

  (defun ibuffer-jump-to-last-buffer ()
    (ibuffer-jump-to-buffer (buffer-name (cadr (buffer-list)))))

  (add-hook 'ibuffer-hook #'ibuffer-jump-to-last-buffer)
#+end_src
** Window management
#+begin_src emacs-lisp
  (leader-keys
    "wq" 'delete-window
    "wo" 'other-window
    "wr" 'evil-window-rotate-upwards
    "w/" 'evil-window-vsplit
    "w-" 'evil-window-split
    "wh" 'evil-window-left
    "wj" 'evil-window-down
    "wk" 'evil-window-up
    "wl" 'evil-window-right)
#+end_src
*** winner-mode
#+begin_src emacs-lisp
  (winner-mode +1)
  (define-key winner-mode-map (kbd "<M-left>") #'winner-undo)
  (define-key winner-mode-map (kbd "<M-right>") #'winner-redo)
#+end_src
** In-file navigation
*** Avy: vim-sneak equivalent

Quickly navigate anywhere in the visible file with 2 character
filtering followed by RET to go there

#+begin_src emacs-lisp
  (use-package avy :custom (avy-all-windows nil))

  (evil-define-key 'normal 'global (kbd "s") 'avy-goto-char-2-below)
  (evil-define-key 'normal 'global (kbd "S") 'avy-goto-char-2-above)
  (evil-define-key 'visual 'global (kbd "s") 'avy-goto-char-2)

  (leader-keys
    "sw" 'avy-goto-word-0-below
    "Sw" 'avy-goto-word-0-above)
#+end_src

** Programming tools & Config
*** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :init
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    :config
    (leader-keys
      "el" 'flycheck-list-errors
      "en" 'flycheck-next-error
      "ep" 'flycheck-previous-error)
    (add-hook 'after-init-hook #'global-flycheck-mode))

  (setq flycheck-javascript-eslint-executable "eslint_d")

  ;; Disable jshint in favour of eslint
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))

  ;; use eslint with rjsx-mode for (j|t)sx? files
  ;; (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (flycheck-add-mode 'javascript-eslint 'typescript-mode)
  (flycheck-add-mode 'javascript-eslint 'rjsx-mode)

  ;; customize flycheck temp file prefix
  (setq-default flycheck-temp-prefix ".flycheck")

  ;; disable json-jsonlist checking for json files
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(json-jsonlist)))
#+end_src
**** Flycheck posframe
#+begin_src emacs-lisp
  (use-package flycheck-posframe
    :after flycheck
    :config (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))
#+end_src
*** Eglot
#+begin_src emacs-lisp
  (use-package eglot)
#+end_src
*** LSP Mode
#+begin_src emacs-lisp
  (setq lsp-log-io nil) ;; Don't log everything = speed
  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-restart 'auto-restart)
  (setq lsp-ui-sideline-enable nil)
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-position 'top)
  (setq lsp-headerline-breadcrumb-enable nil)

  (evil-normalize-keymaps)
  (evil-define-key 'normal 'lsp-ui-doc-frame-mode [?q] #'lsp-ui-doc-unfocus-frame)
  (evil-define-key 'normal 'lsp-ui-doc-mode       [?K] #'lsp-ui-doc-focus-frame)

  (use-package lsp-mode
    :config
    (evil-leader/set-key-for-mode 'lsp-mode "gd" 'lsp-find-definition)
    (lsp-enable-which-key-integration t)
    :hook (
           (typescript-mode . lsp-deferred)
           (rjsx-mode . lsp-deferred)
           (web-mode . lsp-deferred)
           (python-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration)
           )
    :commands lsp-deferred)

  (use-package lsp-ui :commands lsp-ui-mode)
#+end_src
*** Specific language pages
**** Web mode
#+begin_src emacs-lisp
  (use-package web-mode
    :defer 2
    :mode (
       ("\\.tsx\\'" . web-mode)
       ("\\.html\\'" . web-mode))
    :commands web-mode)
#+end_src
**** Emmet mode
#+begin_src emacs-lisp
  (use-package emmet-mode
    :defer 2
    :hook ((css-mode . emmet-mode)
           (scss-mode . emmet-mode)
           (web-mode . emmet-mode)
           (rjsx-mode . (lambda ()
                          (emmet-mode)
                          (setq-local emmet-expand-jsx-className? t) ;; default nil
                          ))))
#+end_src
**** RJSX mode
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :mode (
           ("\\.js\\'" . rjsx-mode)
           ("\\.jsx\\'" .  rjsx-mode)
           ))
#+end_src
**** Python mode
#+begin_src emacs-lisp
    (use-package python
      :delight "π "
      :bind (("M-[" . python-nav-backward-block)
             ("M-]" . python-nav-forward-block))
      :preface
      (defun python-remove-unused-imports()
        "Removes unused imports and unused variables with autoflake."
        (interactive)
        (if (executable-find "autoflake")
            (progn
              (shell-command (format "autoflake --remove-all-unused-imports -i %s"
                                     (shell-quote-argument (buffer-file-name))))
              (revert-buffer t t t))
          (warn "python-mode: Cannot find autoflake executable."))))

    (use-package lsp-python-ms
      :ensure t
      :init (setq lsp-python-ms-auto-install-server t)
      :hook (python-mode . (lambda ()
                              (require 'lsp-python-ms)
                              (lsp-deferred))))  ; or lsp-deferred
#+end_src
***** pyvenv + pipenv
#+begin_src emacs-lisp
  (use-package pyvenv :after python)

  (use-package pipenv
    :hook (python-mode . pipenv-mode)
    :init
    (setq pipenv-projectile-after-switch-function #'pipenv-projectile-after-switch-extended))
#+end_src
**** Typescript mode
#+begin_src emacs-lisp
  (setq js2-mode-show-parse-errors nil)
  (setq js2-mode-show-strict-warnings nil)

  (use-package typescript-mode
    :mode (
         ("\\.ts\\'" . typescript-mode)
           ))
#+end_src
*** Prettier
#+begin_src emacs-lisp
  (defun enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
    (if (buffer-file-name)
        (if (string-match (car my-pair) buffer-file-name)
        (funcall (cdr my-pair)))))

  (use-package prettier-js)

  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.jsx?\\'" . prettier-js-mode))
                   (enable-minor-mode
                                '("\\.tsx?\\'" . prettier-js-mode))))
#+end_src
*** Eslintd
#+begin_src emacs-lisp
  (use-package eslintd-fix
    :hook
    ((typescript-mode rjsx-mode web-mode) . eslintd-fix-mode))
#+end_src
** Org mode
#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.5)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.35)
                    (org-level-4 . 1.3)
                    (org-level-5 . 1.4)
                    (org-level-6 . 1.4)
                    (org-level-7 . 1.4)
                    (org-level-8 . 1.4)))
      (set-face-attribute (car face) nil :font "Source Code Pro" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :family "Source Code Pro" :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :family "Source Code Pro" :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :family "Source Code Pro" :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :family "Source Code Pro" :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :family "Source Code Pro" :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :family "Source Code Pro" :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :family "Source Code Pro" :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :family "Source Code Pro" :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :family "Source Code Pro" :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :family "Source Code Pro" :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :family "Source Code Pro" :inherit 'fixed-pitch))

  (defun sal/org-mode-setup ()
    "Org mode setup."
    (org-indent-mode)
    (auto-fill-mode)
    (global-linum-mode 0)
    (visual-line-mode 1))

  (use-package org
    :defer 1
    :hook (
           (org-mode . efs/org-font-setup)
           (org-mode . sal/org-mode-setup))
    :config
    (setq org-return-follows-link t)
    (setq org-ellipsis " ▾"))

  (use-package deft
    :after org
    :config
    (leader-keys
      "od" 'deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/org-roam/"))

  (use-package org-roam
    :after (org evil)
    :config
    (leader-keys
      "or" 'org-roam
      "of" 'org-roam-find-file
      "oc" 'org-roam-capture
      "oi" 'org-roam-insert
      "oat" 'org-roam-tag-add)
    (setq org-roam-directory "~/org-roam")
    :init
    (org-roam-mode))

  (evil-define-key 'normal 'org-mode-map (kbd "\\ e") 'org-edit-special)
  (evil-define-key 'normal 'org-mode-map (kbd "\\ q") 'org-edit-src-exit)
#+end_src
