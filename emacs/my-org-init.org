#+author: Me. Your friendly neighborhood web developer
#+title: My emacs configuration via org mode!

* Load my custom scripts
#+begin_src emacs-lisp
  (load-file "~/dotfiles/emacs/modules/sal-functions.el")
  (load-file "~/dotfiles/emacs/modules/org-agenda-functions.el")

#+end_src
* Package management
#+begin_src emacs-lisp

  (straight-use-package 'use-package)

#+end_src
* Use $PATH
#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :config
    (setenv "SHELL" "/bin/zsh")
    (setq shell-file-name "/bin/zsh"))

  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))

#+end_src
* Search via Ripgrep/Deadgrep
#+begin_src emacs-lisp

  (use-package ripgrep)
  (use-package deadgrep)

#+end_src
* Keybindings via General.el + Hydra + Embark
#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")
    (leader-keys
      "T"  '(:ignore t :which-key "toggles")
      "Tn" '(sal-switch-linum-mode :which-key "toggle linum mode relative/absolute")))

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (leader-keys
    "tf" '(hydra-text-scale/body :which-key "scale text"))

  (defhydra hydra-scroll-page (:timeout 4)
    "scroll the page"
    ("k" evil-scroll-up "up")
    ("j" evil-scroll-down "down")
    ("f" nil "finished" :exit t))

  (leader-keys
    "ts" '(hydra-scroll-page/body :which-key "scroll page"))

  (use-package embark ;; Keybinds for minibuffer commands
    :bind (("C-." . embark-act))
    :config
    (embark-define-keymap sal-embark-file-map
                          "Keymap for actions for tab-bar tabs (when mentioned by name)."
                          ("-" sal-split-below)
                          ("/" sal-split-right))
    (add-to-list 'embark-keymap-alist '(file . sal-embark-file-map))

    (setq embark-action-indicator
          (lambda (map _target)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

#+end_src
* Improved help docs
Improve Emacs's built-in docs with more contextual info
#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key))

  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.

  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

  (leader-keys "h" 'help-command)

#+end_src
* Menu Completion
#+begin_src emacs-lisp

  (use-package consult
    :config
    (setq consult-preview-key (kbd "C-\\")))

  (use-package selectrum
    :bind (:map selectrum-minibuffer-map
                ("C-j" . selectrum-next-candidate)
                ("C-k" . selectrum-previous-candidate))
    :config
    (selectrum-mode +1))

  (use-package selectrum-prescient
    :config
    (selectrum-prescient-mode +1) ;; make sorting and filtering more intelligent
    (prescient-persist-mode +1))  ;; save command history on disk: sorting gets more intelligent over time

  (use-package marginalia ;; Annotate minibuffer commands
    :after evil
    :config
    (add-to-list 'marginalia-prompt-categories '("Find file" . file))
    (marginalia-mode))

#+end_src
* Company mode
Provides completions as you type in a buffer
#+begin_src emacs-lisp

  (use-package company
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :config
    (company-tng-mode)
    (setq company-tooltip-align-annotations t
          company-selection-wrap-around t))

  (add-hook 'after-init-hook 'global-company-mode)

  (use-package company-box :hook (company-mode . company-box-mode)) ;; Icons in company dropdowns

  (use-package company-quickhelp :config (company-quickhelp-mode))

  (eval-after-load 'company '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin))

#+end_src
* Syntax checking via Flycheck
#+begin_src emacs-lisp

  (use-package flycheck
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode)
    :config
    (setq flycheck-javascript-eslint-executable "eslint_d")
    (setq-default flycheck-emacs-lisp-load-path 'inherit
                  flycheck-disabled-checker '(emacs-list-checkdoc)
                  flycheck-temp-prefix ".flycheck"
                  flycheck-disabled-checkers
                  (append flycheck-disabled-checkers '(javascript-jshint json-jsonlist))
                  )
    (setq flycheck-locate-config-file-functions '(flycheck-locate-config-file-ancestor-directories
                                                  flycheck-locate-config-file-by-path)
          flycheck-check-syntax-automatically '(save
                                                ;; idle-change
                                                ;; new-line
                                                mode-enabled)
          flycheck-display-errors-delay 0.3
          flycheck-flake8rc '(".flake8"))

    (leader-keys
      "el" 'flycheck-list-errors
      "en" 'flycheck-next-error
      "ep" 'flycheck-previous-error))

  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
  (flycheck-add-mode 'javascript-eslint 'typescript-mode)
  (flycheck-add-mode 'javascript-eslint 'typescript-tsx-mode)

  (use-package posframe)

  (use-package flycheck-posframe ;; Show flycheck messages via posframe
    :after flycheck
    :config
    (setq flycheck-posframe-error-prefix "■ ")
    (setq flycheck-posframe-info-prefix "■ ")
    (setq flycheck-posframe-prefix "■ ")
    (setq flycheck-posframe-warning-prefix "■ ")

    (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))

  (use-package flycheck-aspell)
#+end_src
* Code linting & formating
Via Prettier/Black/Eslint/Editorconfig
- https://prettier.io/
- https://pypi.org/project/black/
- https://eslint.org/
  - https://github.com/mantoni/eslint_d.js/
- https://editorconfig.org/
#+begin_src emacs-lisp

  (use-package apheleia
    :straight '(apheleia
                :type git
                :host github
                :repo "radian-software/apheleia")
    :hook ((web-mode
            typescript-mode
            typescript-tsx-mode
            css-mode
            python-mode
            scss-mode
            rjsx-mode
            vue-mode
            json-mode) . apheleia-mode)
    :config
    (add-to-list 'apheleia-mode-alist '(typescript-tsx-mode . prettier))
    )

  (use-package eslintd-fix
    :hook ((web-mode
            typescript-mode
            typescript-tsx-mode
            css-mode
            scss-mode
            rjsx-mode
            json-mode) . eslintd-fix-mode))

  (use-package editorconfig :config (editorconfig-mode 1))

#+end_src
* EVIL mode
Evil mode provides vim keybindings
#+begin_src emacs-lisp

  ;; Group START --- My evil config uses these packages
  (use-package undo-fu)
  (use-package origami :config (global-origami-mode))
  (use-package drag-stuff :config (drag-stuff-mode t)) ;; Used for shortcut to move lines up/down
  ;; Group END

  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq-default evil-symbol-word-search t)
    :custom
    (evil-want-C-u-scroll t)
    (evil-want-C-i-jump t)
    (evil-want-Y-yank-to-eol t)
    (evil-undo-system 'undo-fu)
    (evil-split-window-below t)
    (evil-vsplit-window-right t)
    :config
    (evil-set-initial-state 'Custom-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (evil-mode 1))

  (general-evil-setup t) ;; integrate w/ general.el

  (general-define-key
   :states '(normal)
   "u"    'undo-fu-only-undo
   "U"    'undo-fu-only-redo
   "\C-r" 'undo-fu-only-redo
   "gm"   'evil-search-word-forward
   "gl"   'evil-end-of-line
   "gh"   'evil-beginning-of-line)

  (define-key evil-normal-state-map (kbd "[ SPC") 'insert-line-above)
  (define-key evil-normal-state-map (kbd "] SPC") 'insert-line-below)

  (general-define-key
   :states '(visual)
   "J" 'drag-stuff-down
   "K" 'drag-stuff-up)

  ;; Use <escape> like you use <C-g> across emacs
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

  (use-package evil-surround :config (global-evil-surround-mode 1))

  (use-package evil-goggles
    :custom
    (evil-goggles-yank-face ((t (:inherit evil-goggles-default-face :background "DarkOrange1"))))
    :config
    (evil-goggles-mode)
    (setq evil-goggles-duration 0.500
          evil-goggles-blocking-duration 0.001
          evil-goggles-async-duration 0.900
          evil-goggles-enable-paste nil
          evil-goggles-enable-delete nil
          evil-goggles-enable-change nil
          evil-goggles-enable-indent nil
          evil-goggles-enable-join nil
          evil-goggles-enable-fill-and-move nil
          evil-goggles-enable-paste nil
          evil-goggles-enable-shift nil
          evil-goggles-enable-surround nil
          evil-goggles-enable-commentary nil
          evil-goggles-enable-nerd-commenter nil
          evil-goggles-enable-replace-with-register nil
          evil-goggles-enable-set-marker nil
          evil-goggles-enable-undo nil
          evil-goggles-enable-redo nil
          evil-goggles-enable-record-macro nil))

  (use-package evil-nerd-commenter)

#+end_src
** Evil Collection
A set of recommeded keybindings for evil-mode
#+begin_src emacs-lisp

  (setq evil-want-keybinding nil)

  (use-package evil-collection
    :custom
    (evil-collection-magit-state 'emacs)
    (evil-collection-want-unimpaired-p nil)
    :config
    (evil-collection-init))

#+end_src
** Evil leader
=<leader>= key for evil-mode
#+begin_src emacs-lisp

  (use-package evil-leader :config (global-evil-leader-mode)

  (evil-leader/set-leader "SPC"))

  (leader-keys
    "u"  'universal-argument       ;; <C-u> is the default, I use that for scrolling up
    "x"  'execute-extended-command ;; <M-x> is the defualt, which is awkward to type
    "qq" 'save-buffers-kill-terminal
    "cc" 'comment-line)

#+end_src
* Org mode
#+begin_quote
Your life in plain text
#+end_quote
https://orgmode.org/
#+begin_src emacs-lisp

  (add-hook 'org-agenda-mode-hook 'sal-agenda-setup)

  (general-define-key
   :prefix "C-c"
   "a" 'air-pop-to-org-agenda
   "t" 'air-org-agenda-capture
   "c" 'org-capture)

  (use-package org
    :hook ((org-mode . sal/org-mode-setup)
           (org-mode . visual-line-mode)
           (org-mode . org-indent-mode)
           (org-mode . (lambda () (setq-local evil-auto-indent nil))))
    :bind (:map org-mode-map
                ("C-c e" . org-edit-special)
                ("C-l" . consult-org-heading)
                :map org-src-mode-map
                ("C-c s" . org-edit-src-exit))
    :custom
    (org-directory "~/org")
    (org-hide-emphasis-markers t)
    (org-agenda-files (list "~/org" "~/org/gtd" "~/org/notes/notes.org"))
    :config
    (add-to-list 'org-modules 'org-habit)
    (setq org-return-follows-link t
          org-archive-location "~/org/archive.org_archive::"
          org-ellipsis " ▾"
          org-agenda-skip-scheduled-if-done t
          org-agenda-timegrid-use-ampm 1
          org-deadline-warning-days 2
          org-agenda-skip-deadline-if-done t
          org-agenda-hide-tags-regexp (rx (or "PROJECT" "UPCOMING" "SOMEDAY" "inbox"))
          org-agenda-span 'day
          org-agenda-prefix-format
          '((agenda . " %i %-12:c%?-12t% s")
            (todo   . " %i %-12:c")
            (tags   . " %i %-12:c")
            (search . " %i %-12:c")))
    (setq org-agenda-custom-commands
          '(("g" "GTD view"
             ((agenda)
              (todo "NEXT" ((org-agenda-overriding-header "Next actions:")))
              (todo "WAITING" ((org-agenda-overriding-header "Waiting on:")))
              (tags "inbox"
                    ((org-agenda-prefix-format "  %?-12t% s")
                     (org-agenda-overriding-header "Inbox:")))
              (tags "PROJECT-SOMEDAY" ((org-agenda-overriding-header "Projects:")
                                       (org-agenda-prefix-format "  %?-12t% s")
                                       (org-agenda-skip-function
                                        '(or (org-agenda-skip-entry-if 'todo '("NEXT" "WAITING" "DONE"))
                                             (org-agenda-skip-if nil '(scheduled deadline))))))
              (todo "DONE" ((org-agenda-overriding-header "Completed items:")))
              ))
            ("d" "GTD Declutter"
             ((tags "PROJECT-SOMEDAY" ((org-agenda-overriding-header "Projects:")
                                       (org-agenda-prefix-format "  %?-12t% s")))
              (tags "SOMEDAY" ((org-agenda-prefix-format "  %?-12t% s")
                               (org-agenda-overriding-header "Someday/maybe:")))))
            ("r" "GTD Someday Review"
             ((tags "SOMEDAY" ((org-agenda-overriding-header "Someday/maybe:")
                               (org-agenda-prefix-format "  %?-12t% s")))
              ))
            ))
    (setq org-capture-templates
          '(("t" "Todo"
             entry (file "~/org/gtd/inbox.org")
             "* %?")

            ("m" "Meeting"
             entry (file+olp+datetree "~/org/calendar.org" "Meetings")
             "* %^{Description} :MEETING:\n%^{When}t")

            ("c" "Calendar entry"
             entry (file "~/org/calendar.org")
             "* %^{Description} %^g\n%^{When}t")

            ("s" "EOD checkin"
             entry (file+olp+datetree "~/org/calendar.org" "EOD Status")
             "* checkin\n%t\n%?")

            ("j" "Journal" entry (file+datetree "~/org/notes/journal.org") "* %?\n%U")

            ("n" "Notes" entry (file+datetree "~/org/notes/notes.org") "* Notes\n%t\n%?")

            ("r" "Resource" entry (file "~/org/resources.org") "* %?")
            ))
    (setq org-log-done t)
    (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
    (setq org-default-notes-file (concat org-directory "/notes/notes.org"))
    (setq org-refile-targets '(("~/org/gtd/projects.org" :maxlevel . 3)
                               ("~/org/gtd/tickler.org" :maxlevel . 2)
                               ("~/org/gtd/reference.org" :maxlevel . 2)
                               ("~/org/readlater.org" :maxlevel . 1)
                               ("~/org/resources.org" :maxlevel . 1)
                               (org-agenda-files :maxlevel . 5)
                               )
          ;; org-refile-targets '((org-agenda-files :maxlevel . 3))
          org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm)
    )

  (use-package deft
    :config
    (leader-keys
      'deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/org-roam/"))

  (use-package org-roam
    :custom
    (org-roam-directory "~/org-roam")
    (org-roam-completion-everywhere t)
    :config
    (leader-keys
      "or" 'org-roam
      "of" 'org-roam-node-find
      "oc" 'org-roam-capture
      "oi" 'org-roam-insert))

#+end_src
* MU4E
Email via emacs
* Kubernetes
** Kubel.el
#+begin_src emacs-lisp

  (use-package kubel)

#+end_src
* Terraform
#+begin_src emacs-lisp
  (use-package terraform-mode)
#+end_src
* Project/file management
#+begin_src emacs-lisp

  (leader-keys
    "sp" 'deadgrep
    "fe" 'neotree-projectile-action
    "fj" 'dired-jump
    "fr" 'rename-file
    "f5" 'load-file
    "fs" 'evil-write-all
    "fy" 'show-file-name
    "f.s" 'save-buffer)

#+end_src
** Projectile
#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :bind ("M-," . projectile-find-file)
    :config
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    (projectile-mode))

  (leader-keys
    "," 'projectile-find-file
    "po" 'projectile-switch-project
    "pv" 'dired-jump)

#+end_src
** Dired
Directory Editor--a file manager
#+begin_src emacs-lisp

  (setq delete-by-moving-to-trash t
        trash-directory "~/.Trash/")

  (let ((gls "/usr/local/bin/gls"))
        (if (file-exists-p gls) (setq insert-directory-program gls)))

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (
           ("C-x C-j" . dired-jump)
           (:map dired-mode-map
                 ("M-s" . persp-switch)))
    :custom ((dired-listing-switches "-agG"))
    :config
    (setq dired-dwim-target t)
    (evil-collection-define-key 'normal 'dired-mode-map
      "c" 'find-file
      "h" 'dired-up-directory
      "l" 'dired-find-file))

  (use-package all-the-icons
    :custom ((all-the-icons-dired-monochrome nil)))
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (defun mydired-sort ()
    "Sort dired listings with directories first."
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2) ;; beyond dir. header
        (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
      (set-buffer-modified-p nil)))

  (defadvice dired-readin
      (after dired-after-updating-hook first () activate)
    "Sort dired listings with directories first before adding marks."
    (mydired-sort))

#+end_src
** Magit
#+begin_src emacs-lisp

  (setq auto-revert-check-vc-info t) ;; modeline integration

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config
    (general-define-key
      :keymaps 'magit-status-mode-map
      "C-j" 'magit-section-forward
      "C-k" 'magit-section-backward
      "M-j" 'magit-section-forward-sibling
      "M-k" 'magit-section-backward-sibling)
    (setq magit-diff-refine-hunk (quote nil))
    (setq magit-refresh-status-buffer nil)
    (setq auto-revert-buffer-list-filter
          'magit-auto-revert-repository-buffer-p)
    (setq magit-auto-revert-tracked-only t)
    ;; When 'C-c C-c' is pressed in the magit commit message buffer,
    ;;   delete the magit-diff buffer related to the current repo.
    (add-hook 'git-commit-setup-hook
              (lambda ()
                (add-hook 'with-editor-post-finish-hook
                          #'kill-magit-diff-buffer-in-current-repo
                          nil t))))  ; the t is important

  (leader-keys "gs" 'magit-status)

#+end_src
** Neotree / Treemacs
#+begin_src emacs-lisp

  (use-package treemacs
    :defer 1
    :bind (("C-c f j" . treemacs-find-file))
    :config
    (setq treemacs-display-current-project-exclusively t
          treemacs-project-follow-mode t
          treemacs-width-is-initially-locked nil
          treemacs-width 40
          treemacs-git-mode nil))

  (use-package treemacs-evil
    :after treemacs)

  (use-package treemacs-icons-dired
    :hook (treemacs-icons-dired))

  (use-package neotree
    :ensure t
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)
          neo-hide-cursor t
          neo-window-width 30)
    :general
    (:states 'normal
             :keymaps 'neotree-mode-map
             "md" 'neotree-delete-node
             "ma" 'neotree-create-node
             "mm" 'neotree-rename-node
             "R" 'neotree-refresh
             "RET" 'neotree-enter
             "s" 'avy-goto-word-1
             "H" 'neotree-hidden-file-toggle
             "?" 'describe-mode
             "h" 'neotree-select-up-node
             "l" 'neotree-enter
             "q" 'neotree-hide))

#+end_src
* Buffer management
#+begin_src emacs-lisp

  (global-set-key (kbd "C-;") 'ibuffer)
  (global-set-key (kbd "C-/") 'ibuffer)

  (global-set-key (kbd "M-/") 'switch-to-buffer)

  (leader-keys
    ";" 'switch-to-buffer
    "/" 'switch-to-buffer
    "TAB" 'evil-switch-to-windows-last-buffer
    "br" 'rename-buffer
    "bd" 'kill-this-buffer)

  (use-package avy :custom (avy-all-windows nil))

  (leader-keys "sf" 'consult-line)

  (general-define-key
    :states '(normal visual)
    "s" 'avy-goto-char-2)

#+end_src
** Ibuffer
#+begin_src emacs-lisp

  (use-package ibuffer-projectile)
  (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-projectile-set-filter-groups)))

  (add-hook 'ibuffer-hook #'ibuffer-jump-to-last-buffer)

#+end_src
** Perspective.el
Enables the organization of buffers into "workspaces". Useful when working on multiple projects
#+begin_src emacs-lisp

  (use-package perspective
    :commands persp-state-load
    :custom
    (persp-state-default-file "~/Documents/perspective-saves")
    :config
    (setq persp-suppress-no-prefix-key-warning t)
    :bind (("M-s" . persp-switch))
    :init
    (persp-mode))

  (leader-keys
    "s;" 'persp-switch
    "s/" 'persp-switch
    "ss" 'persp-set-buffer
    "sr" 'persp-rename)

#+end_src
* Window management
#+begin_src emacs-lisp

  (winner-mode +1)

  (defhydra hydra-winner (:timeout 4)
    "scale text"
    ("k" winner-redo "winner-redo")
    ("j" winner-undo "winner-undo")
    ("f" nil "finished" :exit t))

  (leader-keys
    "w," '(hydra-winner/body :which-key "winner")
    "wq" 'delete-window
    "wo" 'delete-other-windows
    "w TAB" 'other-window
    "wr" 'evil-window-rotate-upwards
    "w/" 'evil-window-vsplit
    "w-" 'evil-window-split
    "wh" 'evil-window-left
    "wj" 'evil-window-down
    "wk" 'evil-window-up
    "wl" 'evil-window-right
    "w=" 'balance-windows)

#+end_src
** Popper.el
[[https://github.com/karthink/popper][This]] marks some buffers as being popups so you can quickly manage their visibility without disrupting your window layout
#+begin_src emacs-lisp
  (use-package popper
    :config
    (setq popper-group-function #'popper-group-by-perspective) ; group by perspective
    (setq popper-reference-buffers nil)
    (global-set-key (kbd "C-`") 'popper-toggle-latest)
    (global-set-key (kbd "M-`") 'popper-cycle)
    (global-set-key (kbd "C-M-`") 'popper-toggle-type)
    (popper-mode))
#+end_src
* Terminal in emacs
#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000)
    :hook
    (vterm-mode . (lambda ()
                    (setq-local hl-line-mode nil
                                line-number-mode nil
                                column-number-mode nil))))

  (use-package multi-vterm
    :config
    (setq vterm-keymap-exceptions nil)
    (general-define-key
     :states  '(insert)
     :keymaps 'vterm-mode-map
     "C-e" 'vterm--self-insert
     "C-f" 'vterm--self-insert
     "C-a" 'vterm--self-insert
     "C-v" 'vterm--self-insert
     "C-b" 'vterm--self-insert
     "C-w" 'vterm--self-insert
     "C-u" 'vterm--self-insert
     "C-n" 'vterm--self-insert
     "C-m" 'vterm--self-insert
     "C-p" 'vterm--self-insert
     "C-j" 'vterm--self-insert
     "C-k" 'vterm--self-insert
     "C-r" 'vterm--self-insert
     "C-t" 'vterm--self-insert
     "C-g" 'vterm--self-insert
     "C-c" 'vterm--self-insert
     "C-SPC" 'vterm--self-insert
     "C-z" #'evil-normal-state)
    (general-define-key
     :states  '(normal)
     :keymaps 'vterm-mode-map
     ",c"        'multi-vterm-prev
     "i"         'evil-insert-resume
     "<return>"  'evil-insert-resume
     "<prior>"   'scroll-down-command
     "<next>"    'scroll-up-command
     "M-s"       'persp-switch
     "C-d"       #'evil-scroll-down)
    (define-key vterm-mode-map [return] #'vterm-send-return))

  ;; Terminal
  (leader-keys
    "t" '(:ignore t :which-key "terminal")
    "tt" (lambda ()
           (interactive)
           (sal-cd-project-root)
           (multi-vterm))
    "t/" (lambda ()
           (interactive)
           (split-window-right)
           (other-window 1)
           (sal-cd-project-root)
           (multi-vterm))
    "td" (lambda ()
           (interactive)
           (split-window-below)
           (other-window 1)
           (sal-cd-project-root)
           (multi-vterm)))

#+end_src
* YASnippets
#+begin_src emacs-lisp

  (use-package yasnippet
    :bind (:map evil-insert-state-map
                ("C-y" . yas-expand))
    :config
    (yas-global-mode 1)
    (setq yas-snippet-dirs
        '("~/.emacs.d/snippets")))

#+end_src
* Tree Sitter
- https://tree-sitter.github.io/tree-sitter/
#+begin_src emacs-lisp

  (use-package tree-sitter
    :hook ((typescript-mode . tree-sitter-hl-mode)
           (typescript-tsx-mode . tree-sitter-hl-mode)))

  (use-package tree-sitter-langs
    :after tree-sitter
    :config
    (tree-sitter-require 'tsx)
    (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx))
    (add-to-list 'tree-sitter-major-mode-language-alist '(rustic-mode . rust)))

#+end_src
* Language Server Protocol
- https://emacs-lsp.github.io/lsp-mode/
#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :config
    (setq lsp-idle-delay 0.5
          lsp-auto-guess-root t
          lsp-restart 'auto-restart
          lsp-enable-completion-at-point t
          lsp-enable-symbol-highlighting t
          lsp-modeline-diagnostics-enable nil
          lsp-diagnostic-package :none
          lsp-diagnostic-provider :none
          lsp-log-io nil ;; Don't log everything = speed
          lsp-lens-enable nil
          lsp-headerline-breadcrumb-enable t
          lsp-signature-auto-activate t
          lsp-modeline-code-actions-enable nil
          lsp-eslint-enable nil
          lsp-enable-on-type-formatting nil
          lsp-enable-folding t
          lsp-enable-imenu nil
          lsp-enable-snippet t)
    :custom
    (lsp-eldoc-enable-hover nil)
    (lsp-eldoc-render-all nil)
    (lsp-enable-which-key-integration t)
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-rust-analyzer-server-display-inlay-hints t))

  (with-eval-after-load 'lsp-mode
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))

  (defun sal/lsp-ui-doc-show ()
    (interactive)
    (lsp-ui-doc-show)
    (lsp-ui-doc-focus-frame))

  (defun sal/lsp-ui-doc-hide ()
    (interactive)
    (lsp-ui-doc-unfocus-frame)
    (lsp-ui-doc-hide))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :bind (:map lsp-mode-map
                ("M-d" . xref-find-definitions)
                ("M-r" . xref-find-references)
                ("M-t" . lsp-find-type-definition))
    :config
    (evil-define-key 'normal 'lsp-ui-doc-mode
      [?K] #'sal/lsp-ui-doc-show)
    (evil-define-key 'normal 'lsp-ui-doc-frame-mode
      [?q] #'sal/lsp-ui-doc-hide)
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-show-with-cursor nil
          lsp-ui-doc-show-with-mouse nil
          lsp-ui-doc-use-childframe t
          lsp-ui-doc-header t
          lsp-ui-doc-max-height 50
          lsp-ui-doc-max-width 100
          lsp-ui-doc-position 'at-point
          lsp-ui-doc-include-signature t
          lsp-ui-sideline-enable nil
          lsp-ui-flycheck-enable t
          lsp-ui-flycheck-live-reporting nil)
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
    ;; (require 'lsp-diagnostics)
    ;; (lsp-diagnostics-flycheck-enable)
    :custom
    (lsp-ui-peek-enable t)
    (lsp-ui-peek-show-directory t)
    (lsp-ui-peek-list-width 60)
    (lsp-ui-peek-peek-height 25)
    (lsp-ui-peek-fontify 'on-demand))


#+end_src
* Web mode
#+begin_src emacs-lisp

  (use-package web-mode
    :defer 2
    :hook (web-mode . lsp-deferred)
    :mode (("\\.html\\'" . web-mode))
    :commands web-mode)

#+end_src
* Emmet mode
- https://www.emmet.io/
#+begin_src emacs-lisp

  (use-package emmet-mode
    :hook ((typescript-tsx-mode . emmet-mode)
           (web-mode . emmet-mode)
           (css-mode . emmet-mode)
           (scss-mode . emmet-mode)))

  (define-key evil-insert-state-map (kbd "C-,") 'emmet-expand-line)

#+end_src
* REPL
1. *R*ead the user input.
2. *E*valuate your code (to work out what you mean).
3. *P*rint any results (so you can see the computer’s response).
4. *L*oop back to step 1 (to continue the conversation).
- https://codewith.mu/en/tutorials/1.0/repl
#+begin_src emacs-lisp

  (use-package nodejs-repl
    :config
    (leader-keys
     "rl" 'nodejs-repl-send-line
     "rr" 'nodejs-repl-send-region
     "rb" 'nodejs-repl-send-buffer))

#+end_src
* RJSX mode
#+begin_src emacs-lisp

  (use-package rjsx-mode
    :hook (rjsx-mode . lsp-deferred)
    :mode (("\\.js\\'" . rjsx-mode)
           ("\\.jsx\\'" .  rjsx-mode)))

#+end_src
* Languages
** Python
#+begin_src emacs-lisp
  (use-package python-mode
    :hook (python-mode . lsp-deferred)
    :custom
    (python-shell-interpreter "python3"))

  (use-package lsp-jedi
    :config
    ;; (with-eval-after-load "lsp-mode"
      ;; (add-to-list 'lsp-disabled-clients 'pyls)
      ;; (add-to-list 'lsp-enabled-clients 'jedi))
    )

  (add-to-list 'flycheck-checkers 'python-mypy t)
  (flycheck-add-next-checker 'python-flake8 'python-mypy t)

  (use-package pyvenv
    :config
    (pyvenv-mode 1))

#+end_src
** Javascript/Typescript
#+begin_src emacs-lisp

  (setq js2-mode-show-parse-errors nil)
  (setq js2-mode-show-strict-warnings nil)

  (use-package typescript-mode
    :init
    (define-derived-mode typescript-tsx-mode typescript-mode "tsx")
    :config
    :mode ("\\.tsx?\\'" . typescript-tsx-mode)
    :hook ((typescript-tsx-mode . (lambda ()
                                    (lsp-deferred)
                                    ;; (flycheck-add-next-checker 'javascript-eslint 'lsp)
                                    ))))

#+end_src
** Vue
#+begin_src emacs-lisp

  (use-package vue-mode :straight (vue-mode :type git :host github :repo "AdamNiederer/vue-mode"))

  (use-package vue-mode
    :mode "\\.vue\\'"
    :config
    (add-hook 'vue-mode-hook #'lsp))

#+end_src
** C#
#+begin_src emacs-lisp

  (use-package csharp-mode
    :hook ((csharp-mode . lsp-deferred))
    :config
    (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))

  (setq lsp-csharp-server-path "~/.emacs.d/.cache/lsp/omnisharp-roslyn/latest/run")

#+end_src
** Lua
#+begin_src emacs-lisp

  (use-package lua-mode
    :config
    (setq lsp-lua-diagnostics-disable '("lowercase-global"))
    :hook ((lua-mode . (lambda ()
                         (lsp-deferred)))))

#+end_src
** Rust
#+begin_src emacs-lisp

  (use-package rustic
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu))
    :config
    (setq rustic-lsp-server 'rust-analyzer)
    (setq rustic-format-on-save t))

#+end_src
* Visuals
#+begin_src emacs-lisp

  (use-package rainbow-mode :config (rainbow-mode)) ;; color in #ffff00
  (use-package pos-tip) ;; for showing tooltips

#+end_src
** Modeline
#+begin_src emacs-lisp

  (use-package minions :config (minions-mode))

  (defun sal-nano-modeline-default-mode (&optional icon)
    (let ((icon (or icon
                    (plist-get (cdr (assoc 'text-mode nano-modeline-mode-formats)) :icon)))
          ;; We take into account the case of narrowed buffers
          (buffer-name (cond
                        ((and (derived-mode-p 'org-mode)
                              (buffer-narrowed-p)
                              (buffer-base-buffer))
                         (format"%s [%s]" (buffer-base-buffer)
                                (org-link-display-format
                                 (substring-no-properties (or (org-get-heading 'no-tags)
                                                              "-")))))
                        ((and (buffer-narrowed-p)
                              (buffer-base-buffer))
                         (format"%s [narrow]" (buffer-base-buffer)))
                        (t
                         (format-mode-line "%b"))))

          (mode-name   (nano-modeline-mode-name))
          (branch      (nano-modeline-vc-branch))
          (position    (format-mode-line "%l:%c"))
          (vim-state   (concat
                        " <"
                        (cond
                         (( eq evil-state 'visual) "V")
                         (( eq evil-state 'normal) "N")
                         (( eq evil-state 'insert) "I")
                         (( eq evil-state 'emacs) "E")
                         (t "*"))
                        "> ")))
      (nano-modeline-render icon
                            buffer-name
                            (concat
                             (if branch (concat "(" branch ")") "")
                             vim-state
                             (format-mode-line global-mode-string)
                             )
                            position)))

  (use-package nano-modeline
    :straight '(nano-modeline
                :type git
                :host github
                :repo "rougier/nano-modeline")
    :custom ((nano-modeline-default-mode-format 'sal-nano-modeline-default-mode)
             (nano-modeline-position 'bottom)
             (nano-modeline-prefix 'default))
    :custom-face
    (nano-modeline-active-secondary ((t (:inherit nano-modeline-active))))
    (nano-modeline-inactive ((t (:inherit mode-line-inactive))))
    :config
    (nano-modeline-mode))

#+end_src
** Line numbers
#+begin_src emacs-lisp

  (global-hl-line-mode 1)

  (add-hook 'prog-mode-hook 'sal-enable-linum)

  (global-linum-mode -1)

  (setq display-line-numbers 'absolute)

#+end_src
** Theme
#+begin_src emacs-lisp

        ;; We need to set these in a specific way when running daemon mode
        (if (daemonp)
            (add-hook 'after-make-frame-functions
                      (lambda (frame)
                        (with-selected-frame frame
                          (sal/set-font-faces))))
          (sal/set-font-faces))

        (setq custom-safe-themes t)


        (use-package modus-themes
          :config
          (load-theme 'modus-vivendi t)
        ;; Configure the Modus Themes' appearance
      (setq modus-themes-mode-line '(accented)
            modus-themes-bold-constructs t
            modus-themes-italic-constructs t
            modus-themes-fringes nil
            modus-themes-tabs-accented t
            modus-themes-paren-match '(bold intense)
            modus-themes-prompts '(bold intense)
            modus-themes-completions 'opinionated
            modus-themes-org-blocks 'tinted-background
            modus-themes-scale-headings t
            modus-themes-region '(bg-only)
            modus-themes-headings
            '((1 . (rainbow overline background 1.4))
              (2 . (rainbow background 1.3))
              (3 . (rainbow bold 1.2))
              (t . (semilight 1.1)))))

        (use-package emojify
          :hook ((after-init . global-emojify-mode))
          :config
          (when (member "Hack Nerd Font" (font-family-list))
            (set-fontset-font
             t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
          (setq emojify-display-style 'unicode)
          (setq emojify-emoji-styles '(unicode))) ; override binding in any mode

        (use-package doom-themes
          :init
          (setq doom-themes-treemacs-theme "doom-colors")
          :config
          ;; (load-theme 'doom-gruvbox t)
          (doom-themes-visual-bell-config))

        (straight-use-package '(nano-theme :type git :host github
                                           :repo "rougier/nano-theme"))

#+end_src
** Dashboard
#+begin_src emacs-lisp

  (use-package dashboard
    :config
    (setq dashboard-set-heading-icons t
          dashboard-startup-banner 'logo
          dashboard-center-content nil
          dashboard-set-navigator t
          dashboard-set-file-icons t
          dashboard-items '((recents  . 10)
                            (bookmarks . 5)
                            (projects . 5)))
    (dashboard-setup-startup-hook)
    )

  (add-hook 'dashboard-after-initialize-hook 'air-pop-to-org-agenda)

#+end_src
** Whichkey
#+begin_src emacs-lisp

  (use-package which-key :config (which-key-mode))

#+end_src
** Whitespace
#+begin_src emacs-lisp

  (whitespace-mode)
  (use-package whitespace-cleanup-mode
    :config
    (global-whitespace-cleanup-mode))

#+end_src
* Other settings
#+begin_src emacs-lisp

  ;; Minimal UI
  (scroll-bar-mode -1)
  (tool-bar-mode   -1)
  (tooltip-mode    -1)
  (menu-bar-mode   -1)

  (setq scroll-margin 3) ;; scroll when within 3 lines of top/bottom of visible buffer
  (setq scroll-step 1)   ;; when doing so, scroll one line at a time

  ;; Parentheses
  (show-paren-mode 1)
  (electric-pair-mode 1)
  ;; (use-package smartparens)
  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))

  ;; Which column is this?
  (column-number-mode)

  ;; Where I left off
  (save-place-mode 1)

  (defalias 'yes-or-no-p #'y-or-n-p)
  (setq inhibit-startup-message t)
  (setq backup-directory-alist '(("." . "~/.config/emacs/.saves")))
  (setq create-lockfiles nil)
  (setq auto-save-default nil)

  ;; Formatting
  (setq-default indent-tabs-mode nil)
  (setq-default tab-always-indent t)
  (setq-default indent-line-function 'insert-tab)

  ;; Suppress warnings about cl being deprecated
  (setq byte-compile-warnings '(cl-functions))

  ;; The rest of the init file.

  ;; Make gc pauses faster by decreasing the threshold.
  ;; (setq gc-cons-threshold (* 2 1000 1000))

  ;; The default is 800 kilobytes.  Measured in bytes.
  ;; (setq gc-cons-percentage 0.6)
  ;; (setq gc-cons-threshold most-positive-fixnum)

  (add-hook 'emacs-startup-hook #'sal-display-startup-time)

#+end_src
