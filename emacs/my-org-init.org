#+title: My emacs configuration via org mode!
#+author: Me. Your friendly neighborhood web developer

* Base layer
** Package management tooling
** Miscellaneous Settings
*** Namespacing
#+begin_src emacs-lisp
  (add-to-list 'load-path  "~/dotfiles/emacs/modules")
  (add-to-list 'load-path  "~/dotfiles/emacs/project-setups")
#+end_src
*** Garbage collection
#+begin_src emacs-lisp
  ;; Make startup faster by reducing the frequency of garbage
  ;; collection.  The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; The rest of the init file.

  ;; Make gc pauses faster by decreasing the threshold.
  ;; (setq gc-cons-threshold (* 2 1000 1000))

  ;; The default is 800 kilobytes.  Measured in bytes.
  ;; (setq gc-cons-percentage 0.6)
  ;; (setq gc-cons-threshold most-positive-fixnum)

  (defun display-startup-time ()
      "Display startup time."
      (message "Emacs loaded in %s with %d garbage collections."
              (format "%.2f seconds"
                      (float-time
                      (time-subtract after-init-time before-init-time)))
              gcs-done))

  (add-hook 'emacs-startup-hook #'display-startup-time)
#+end_src
*** Basic settings
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
  (setq auto-save-default nil)

  (setq backup-directory-alist '(("." . "~/.config/emacs/.saves")))

  (setq inhibit-startup-message t)

  (defalias 'yes-or-no-p #'y-or-n-p)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq-default tab-always-indent t)
  (setq-default indent-line-function 'insert-tab)

  (set-face-attribute 'default nil :font "Source Code Pro" :height 130)

  (save-place-mode 1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (column-number-mode)

  (show-paren-mode 1)
  (electric-pair-mode 1)

  (custom-set-variables
      '(initial-frame-alist (quote ((fullscreen . maximized)))))

  ;; Suppress warnings about cl being deprecated
  (setq byte-compile-warnings '(cl-functions))

  (use-package posframe)
#+end_src
*** Modeline changes
#+begin_src emacs-lisp
  (use-package minions
    :config (minions-mode))

  (require 'saltor-modeline)
#+end_src
*** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :init
    (setq doom-themes-treemacs-theme "doom-colors")
    :config
    (load-theme 'doom-gruvbox t)
    (doom-themes-visual-bell-config))
#+end_src
*** Line number settings
#+begin_src emacs-lisp
  (global-hl-line-mode 1)

  (defun sal-enable-linum ()
    (interactive)
    (if (eq nil display-line-numbers)
        (setq display-line-numbers 'relative)
      (message "Linum mode set")))

  (add-hook 'prog-mode-hook 'sal-enable-linum)

  (global-linum-mode -1)

  (setq display-line-numbers 'relative)
#+end_src
*** Whitespace management
#+begin_src emacs-lisp
  (whitespace-mode)
  (use-package whitespace-cleanup-mode
    :config
    (global-whitespace-cleanup-mode))
#+end_src
** General
#+begin_src emacs-lisp
  (defun sal-switch-linum-mode ()
    (interactive)
    (if (eq 'relative display-line-numbers)
        (setq display-line-numbers 'absolute)
      (setq display-line-numbers 'relative)))

  (use-package general
    :config
    (general-create-definer leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")
      ;; Toggles
      (leader-keys
          "T"  '(:ignore t :which-key "toggles")
          "Tn" '(sal-switch-linum-mode :which-key "change linum mode")))
#+end_src
** Helpful to improve help docs
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key))

  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

  (leader-keys
    "h" 'help-command)
#+end_src
** EVIL
*** Requirements
#+begin_src emacs-lisp
  (use-package undo-fu :config (global-undo-tree-mode -1))
  (use-package origami :config (global-origami-mode))
  (use-package drag-stuff :config (drag-stuff-mode t))
#+end_src
*** The evil package
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq-default evil-symbol-word-search t)
    (add-hook 'evil-local-mode-hook 'turn-on-undo-tree-mode)
    :custom
    (evil-want-C-u-scroll t)
    (evil-want-C-i-jump nil)
    (evil-want-Y-yank-to-eol t)
    (evil-undo-system 'undo-fu)
    :config
    (evil-set-initial-state 'Custom-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (evil-mode 1))

  (define-key evil-normal-state-map (kbd "u") 'undo-fu-only-undo)
  (define-key evil-normal-state-map (kbd "\C-r") 'undo-fu-only-redo)
  (define-key evil-normal-state-map (kbd "U") 'undo-fu-only-redo)

  (define-key evil-normal-state-map (kbd "gm") 'evil-search-word-forward)

  (define-key evil-visual-state-map (kbd "J") 'drag-stuff-down)
  (define-key evil-visual-state-map (kbd "K") 'drag-stuff-up)

  (define-key evil-normal-state-map (kbd "gl") 'evil-end-of-line)
  (define-key evil-normal-state-map (kbd "gh") 'evil-beginning-of-line)

  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

  (defun insert-line-below ()
    "Insert an empty line below the current line."
    (interactive)
    (save-excursion
      (end-of-line)
      (open-line 1)))

  (defun insert-line-above ()
    "Insert an empty line above the current line."
    (interactive)
    (save-excursion
      (end-of-line 0)
      (open-line 1)))

  (define-key evil-normal-state-map (kbd "[ SPC") 'insert-line-above)
  (define-key evil-normal-state-map (kbd "] SPC") 'insert-line-below)
#+end_src
*** Evil Collection
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-want-unimpaired-p nil))

  (when (require 'evil-collection nil t)
    (evil-collection-init))
#+end_src
*** Evil leader
#+begin_src emacs-lisp
  (use-package evil-leader
    :config (global-evil-leader-mode))

  (evil-leader/set-leader "SPC")

  (leader-keys
    "u" 'universal-argument
    "x" 'execute-extended-command)


  (leader-keys
    "qq" 'save-buffers-kill-terminal)
  (leader-keys
    "cc" 'comment-line)
#+end_src
*** Evil surround
#+begin_src emacs-lisp
  (use-package evil-surround
    :config (global-evil-surround-mode 1))
#+end_src
*** Evil goggles
#+begin_src emacs-lisp
  (use-package evil-goggles
    :config
    (evil-goggles-mode)
    (setq evil-goggles-duration 0.500
          evil-goggles-blocking-duration 0.001
          evil-goggles-async-duration 0.900
          evil-goggles-enable-paste nil
          evil-goggles-enable-delete nil
          evil-goggles-enable-change nil
          evil-goggles-enable-indent nil
          evil-goggles-enable-join nil
          evil-goggles-enable-fill-and-move nil
          evil-goggles-enable-paste nil
          evil-goggles-enable-shift nil
          evil-goggles-enable-surround nil
          evil-goggles-enable-commentary nil
          evil-goggles-enable-nerd-commenter nil
          evil-goggles-enable-replace-with-register nil
          evil-goggles-enable-set-marker nil
          evil-goggles-enable-undo nil
          evil-goggles-enable-redo nil
          evil-goggles-enable-record-macro nil))
#+end_src
*** Evil nerd commenter
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter)
#+end_src
** Hydra
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src
*** Font size Hydra
#+begin_src emacs-lisp
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (leader-keys
    "tf" '(hydra-text-scale/body :which-key "scale text"))
#+end_src
*** Scrolling Hydra
#+begin_src emacs-lisp
  (defhydra hydra-scroll-page (:timeout 4)
    "scroll the page"
    ("k" evil-scroll-up "up")
    ("j" evil-scroll-down "down")
    ("f" nil "finished" :exit t))

  (leader-keys
    "ts" '(hydra-scroll-page/body :which-key "scroll page"))
#+end_src
** Whichkey
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src
* Miscellaneous
** Consult
#+begin_src emacs-lisp
  (use-package consult
    :config
    (setq consult-preview-key (kbd "C-\\")))
#+end_src
** Selectrum
#+begin_src emacs-lisp
  (use-package selectrum
    :config
    (selectrum-mode +1)
    :bind (:map selectrum-minibuffer-map
                ("C-j" . selectrum-next-candidate)
                ("C-k" . selectrum-previous-candidate)))

  (use-package selectrum-prescient
    :config
    ;; to make sorting and filtering more intelligent
    (selectrum-prescient-mode +1)

    ;; to save your command history on disk, so the sorting gets more
    ;; intelligent over time
    (prescient-persist-mode +1))
#+end_src
*** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :after evil
  :config
  (add-to-list 'marginalia-prompt-categories '("Find file" . file))
  (marginalia-mode))
#+end_src
*** Embark
#+begin_src emacs-lisp
  (defun sal-split-right ()
    (interactive)
    (projectile--find-file (selectrum-get-current-candidate))
    (split-window-horizontally)
    (evil-switch-to-windows-last-buffer)
    (other-window 1))

  (defun sal-split-below ()
    (interactive)
    (projectile--find-file (selectrum-get-current-candidate))
    (split-window-below)
    (evil-switch-to-windows-last-buffer)
    (other-window 1))

  (use-package embark
    :bind (("C-." . embark-act))
    :config
    (embark-define-keymap sal-embark-file-map
      "Keymap for actions for tab-bar tabs (when mentioned by name)."
      ("-" sal-split-below)
      ("/" sal-split-right))
    (add-to-list 'embark-keymap-alist '(file . sal-embark-file-map))

    (setq embark-action-indicator
          (lambda (map _target)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator)
    )
#+end_src
*** Ripgrep
#+begin_src emacs-lisp
  (use-package ripgrep)
  (use-package deadgrep)
#+end_src
** Company mode
#+begin_src emacs-lisp
  (use-package company
    :config
    (company-tng-mode)
    (setq company-minimum-prefix-length 1)
    (setq company-tooltip-align-annotations t)
    (setq company-selection-wrap-around t))

  (add-hook 'after-init-hook 'global-company-mode)

  ;; Nice icons in company dropdowns
  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package pos-tip)

  ;; Add overlay documentation for the options company provides
  (use-package company-quickhelp
    :config (company-quickhelp-mode))

  (eval-after-load 'company '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin))
#+end_src
** Dashboard: recentf / bookmarks / MRU
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-set-heading-icons t
          dashboard-startup-banner 'logo
          dashboard-center-content nil
          dashboard-set-navigator t
          dashboard-set-file-icons t)
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 5)
                            (projects . 5)))
    (dashboard-setup-startup-hook))
#+end_src
** Org mode
#+begin_src emacs-lisp
  (defun sal/org-mode-setup ()
    "Org mode setup."
    (global-linum-mode 0))

  (let* ((variable-tuple
          (cond ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-block-begin-line ((t (:inherit (shadow fixed-pitch)))))
   '(org-block-end-line ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

  (use-package org
    :defer 1
    :hook ((org-mode . sal/org-mode-setup)
           (org-mode . visual-line-mode)
           (org-mode . auto-fill-mode)
           (org-mode . org-indent-mode)
           (org-mode . (lambda () (setq-local evil-auto-indent nil))))
    :config
    (setq org-return-follows-link t)
    (setq org-ellipsis " ▾")
    :custom
    (org-hide-emphasis-markers t))

  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Lucida Grande" :height 150 :weight thin))))
   '(fixed-pitch ((t ( :family "Source Code Pro" :height 130 :weight regular)))))

  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)

  (use-package org-bullets
    :after org)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  (use-package deft
    :after org
    :config
    (leader-keys
      "od" 'deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/org-roam/"))

  (use-package org-roam
    :after (org evil)
    :config
    (leader-keys
      "or" 'org-roam
      "of" 'org-roam-find-file
      "oc" 'org-roam-capture
      "oi" 'org-roam-insert
      "oat" 'org-roam-tag-add)
    (setq org-roam-directory "~/org-roam")
    :init
    (org-roam-mode))

  (evil-define-key 'normal 'org-mode-map (kbd "\\ e") 'org-edit-special)
  (evil-define-key 'normal 'org-mode-map (kbd "\\ q") 'org-edit-src-exit)
#+end_src

* Terminal settings
** exec-path-from-shell
Make Emacs use the $PATH set up by the user's shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src
** VTerm
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000)
    :hook
    (vterm-mode . (lambda ()
                    (setq-local global-hl-line-mode nil))))

  (use-package multi-vterm
      :config
      (define-key vterm-mode-map [return]                      #'vterm-send-return)

      (setq vterm-keymap-exceptions nil)
      (evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
      (evil-define-key 'normal vterm-mode-map (kbd "C-d")      nil)
      (evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
      (evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
      (evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
      (evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
      (evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
      (evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
      (evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
      (evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
      (evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))

  (use-package eterm-256color
    :hook (vterm-mode . eterm-256color-mode))

  (use-package ivy)

  (use-package theme-looper)

  (defun sal-cd-project-root ()
    (if (projectile-project-root)
        (cd (projectile-project-root))))

  ;; Terminal
  (leader-keys
    "t" '(:ignore t :which-key "terminal")
    "tt" (lambda ()
           (interactive)
           (sal-cd-project-root)
           (multi-vterm))
    "t/" (lambda ()
           (interactive)
           (split-window-right)
           (other-window 1)
           (sal-cd-project-root)
           (multi-vterm))
    "t-" (lambda ()
           (interactive)
           (split-window-below)
           (other-window 1)
           (sal-cd-project-root)
           (multi-vterm)))
#+end_src
* Project/file management
** Magit
#+begin_src emacs-lisp
  ;; Set so modeline info updates
  (setq auto-revert-check-vc-info t)

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :bind
    (:map magit-mode-map
          ("C-j" . magit-section-forward)
          ("C-k" . magit-section-backward)
          ("M-j" . magit-section-forward-sibling)
          ("M-k" . magit-section-backward-sibling))
    :config
    (defun kill-magit-diff-buffer-in-current-repo (&rest _)
      "Delete the magit-diff buffer related to the current repo"
      (let ((magit-diff-buffer-in-current-repo
             (magit-mode-get-buffer 'magit-diff-mode)))
        (kill-buffer magit-diff-buffer-in-current-repo)))
    ;; When 'C-c C-c' is pressed in the magit commit message buffer,
    ;;   delete the magit-diff buffer related to the current repo.
    (add-hook 'git-commit-setup-hook
              (lambda ()
                (add-hook 'with-editor-post-finish-hook
                          #'kill-magit-diff-buffer-in-current-repo
                          nil t))) ; the t is important
    )

  (leader-keys
    "gs" 'magit-status)
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    (projectile-mode))

  (leader-keys
    "," 'projectile-find-file
    ;; "sp" 'projectile-ripgrep
    "po" 'projectile-switch-project)
#+end_src
** Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :config
    (setq dired-dwim-target t)
    (evil-collection-define-key 'normal 'dired-mode-map
      "c" 'find-file
      "h" 'dired-up-directory
      "l" 'dired-find-file
      ))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands
    (dired dired-jump)
    :config
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))
#+end_src
** Neotree
#+begin_src emacs-lisp
  (use-package neotree
    :defer 3
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)
          neo-hide-cursor t
          neo-window-width 30)
    :general
    (:states 'normal
             :keymaps 'neotree-mode-map
             "md" 'neotree-delete-node
             "ma" 'neotree-create-node
             "mm" 'neotree-rename-node
             "R" 'neotree-refresh
             "RET" 'neotree-enter
             "s" 'avy-goto-word-1
             "H" 'neotree-hidden-file-toggle
             "?" 'describe-mode
             "h" 'neotree-select-up-node
             "l" 'neotree-enter
             "q" 'neotree-hide))
#+end_src
** Fzf
#+begin_src emacs-lisp
  (use-package fzf)
#+end_src
** Custom commands
#+begin_src emacs-lisp
  (leader-keys
    "pc" 'capsule-cw-mfe)
#+end_src
** Config

#+begin_src emacs-lisp
  (leader-keys
    "sp" 'deadgrep)

  (defun show-file-name ()
    "Show the full path file name in the minibuffer."
    (interactive)
    (message (buffer-file-name))
    (kill-new (file-truename buffer-file-name)))

  (leader-keys
    "fe" 'neotree-projectile-action
    "fj" 'dired-jump
    "fr" 'rename-file
    "f5" 'load-file
    "fs" 'evil-write-all
    "fy" 'show-file-name
    "f.s" 'save-buffer)
#+end_src
* Buffer management
** Ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer-projectile)
  (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-projectile-set-filter-groups)))

  (defun ibuffer-jump-to-last-buffer ()
    (ibuffer-jump-to-buffer (buffer-name (cadr (buffer-list)))))

  (add-hook 'ibuffer-hook #'ibuffer-jump-to-last-buffer)
#+end_src
** Config
#+begin_src emacs-lisp
  (global-set-key (kbd "C-;") 'ibuffer)

  (leader-keys
    ";" 'consult-buffer
    "TAB" 'evil-switch-to-windows-last-buffer
    "br" 'rename-buffer
    "bd" 'kill-this-buffer)
#+end_src
* Window management
** winner-mode
#+begin_src emacs-lisp
  (winner-mode +1)
  (define-key winner-mode-map (kbd "<M-left>") #'winner-undo)
  (define-key winner-mode-map (kbd "<M-right>") #'winner-redo)
#+end_src
** Config

#+begin_src emacs-lisp
  (leader-keys
    "wq" 'delete-window
    "wo" 'other-window
    "wr" 'evil-window-rotate-upwards
    "w/" 'evil-window-vsplit
    "w-" 'evil-window-split
    "wh" 'evil-window-left
    "wj" 'evil-window-down
    "wk" 'evil-window-up
    "wl" 'evil-window-right
    "w=" 'balance-windows
    )
#+end_src
* In-file navigation
** Avy
#+begin_src emacs-lisp
  (use-package avy
    :custom (avy-all-windows nil))
#+end_src

** Config
#+begin_src emacs-lisp
  (leader-keys
    "sf" 'consult-line)

  (evil-define-key 'normal 'global (kbd "s") 'avy-goto-char-2-below)
  (evil-define-key 'normal 'global (kbd "S") 'avy-goto-char-2-above)
  (evil-define-key 'visual 'global (kbd "s") 'avy-goto-char-2)

  (leader-keys
    "sw" 'avy-goto-word-0-below
    "Sw" 'avy-goto-word-0-above)
#+end_src
* Programming tools & Config
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode)
    :config
    (setq flycheck-locate-config-file-functions '(flycheck-locate-config-file-ancestor-directories
                                                  flycheck-locate-config-file-by-path))
    (setq flycheck-check-syntax-automatically '(save
                                                idle-change
                                                new-line
                                                mode-enabled))
    (setq flycheck-display-errors-delay 0.1)
    (setq flycheck-flake8rc '(".flake8"))
    (setq flycheck-javascript-eslint-executable "eslint_d")

    (setq-default flycheck-temp-prefix ".flycheck")
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint json-jsonlist)))

    (leader-keys
      "el" 'flycheck-list-errors
      "en" 'flycheck-next-error
      "ep" 'flycheck-previous-error)
    )

  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
  (flycheck-add-mode 'javascript-eslint 'typescript-mode)
  (flycheck-add-mode 'javascript-eslint 'typescript-tsx-mode)
#+end_src
** Flycheck posframe
#+begin_src emacs-lisp
  (use-package flycheck-posframe
    :after flycheck
    :config
    (setq flycheck-posframe-error-prefix "■ ")
    (setq flycheck-posframe-info-prefix "■ ")
    (setq flycheck-posframe-prefix "■ ")
    (setq flycheck-posframe-warning-prefix "■ ")

    (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))
#+end_src
** Eslintd
#+begin_src emacs-lisp
  (use-package eslintd-fix
    :hook ((web-mode
            typescript-mode
            typescript-tsx-mode
            css-mode
            scss-mode
            rjsx-mode
            json-mode) . eslintd-fix-mode))
#+end_src
** Prettier
Handled more often by eslintd when a project uses both eslint and prettier
** EditorConfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+end_src
** LSP Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :commands (lsp lsp-deferred)
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :config
    (setq lsp-auto-guess-root t)
    (setq lsp-diagnostic-package :none)
    (add-hook 'web-mode-hook #'lsp-flycheck-enable)

    (setq lsp-log-io nil) ;; Don't log everything = speed
    (setq lsp-restart 'auto-restart)
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-lens-enable nil)
    (setq lsp-keymap-prefix "C-c l")

    (setq lsp-enable-completion-at-point t)
    (setq lsp-enable-symbol-highlighting t)
    (setq lsp-modeline-diagnostics-enable t)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-enable-folding nil)
    (setq lsp-enable-imenu nil)
    (setq lsp-enable-snippet nil)
    (setq lsp-eslint-enable nil)
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    (setq lsp-idle-delay 0.5)

    (evil-leader/set-key-for-mode 'lsp-mode "gd" 'lsp-find-definition)
    (lsp-enable-which-key-integration t)
    )

  ;; lsp-ui
  (setq lsp-ui-sideline-enable nil)
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-position 'top)

  (evil-normalize-keymaps)
  (evil-define-key 'normal 'lsp-ui-doc-frame-mode [?q] #'lsp-ui-doc-unfocus-frame)
  (evil-define-key 'normal 'lsp-ui-doc-mode       [?K] #'lsp-ui-doc-focus-frame)
  (use-package lsp-ui :commands lsp-ui-mode)
#+end_src

** DAP mode
#+begin_src emacs-lisp
  (use-package dap-mode
    :config
    (dap-mode 1)
    (dap-ui-mode 1)
    :custom
    (dap-auto-configure-features '(sessions locals controls)))

  (require 'dap-chrome)
  (dap-chrome-setup)

  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))
#+end_src
** Web mode
#+begin_src emacs-lisp
  (use-package web-mode
    :defer 2
    :hook
    (web-mode . lsp-deferred)
    :mode (
       ("\\.html\\'" . web-mode))
    :commands web-mode)
#+end_src
** RJSX mode
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :hook
    (rjsx-mode . lsp-deferred)
    :mode (
           ("\\.js\\'" . rjsx-mode)
           ("\\.jsx\\'" .  rjsx-mode)
           ))
#+end_src
** Languages
*** Python
**** pyvenv + pipenv
#+begin_src emacs-lisp
  (setq pyvenv-virtualenvwrapper-python "python3")
  (setenv "WORKON_HOME" "~/.local/share/virtualenvs/")

  (use-package pyvenv
    :config
    (setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
    ;; Set correct Python interpreter
    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (call-interactively #'lsp-workspace-restart)
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3"))))
    (pyvenv-mode +1))

  (use-package pipenv
    :hook (python-mode . pipenv-mode)
    :init
    (setq
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended))
#+end_src
**** pylint
#+begin_src emacs-lisp
  (use-package pylint)
#+end_src
**** LSP config
#+begin_src emacs-lisp
  (use-package lsp-python-ms
    :after (lsp-mode)
    :init (setq lsp-python-ms-auto-install-server t)
    :hook
    ((python-mode . (lambda ()
                      (require 'lsp-python-ms)
                      (lsp-deferred)
                      (flycheck-add-next-checker 'lsp 'python-flake8)
                      (flycheck-add-next-checker 'python-flake8 'python-pylint)
                      (message "Added flycheck checkers.")))))
#+end_src
**** The mode
#+begin_src emacs-lisp
  (use-package python-mode
    :hook
    (python-mode . pyvenv-mode))
#+end_src
** Javascript/Typescript
#+begin_src emacs-lisp
  (setq js2-mode-show-parse-errors nil)
  (setq js2-mode-show-strict-warnings nil)

  (use-package typescript-mode
    :init
    (define-derived-mode typescript-tsx-mode typescript-mode "tsx")
    :config
    (setq typescript-indent-level 2)
    :mode ("\\.tsx?\\'" . typescript-tsx-mode)
    :hook ((typescript-mode . subword-mode)
           (typescript-tsx-mode . (lambda ()
                                    (lsp-deferred)
                                    ;; (flycheck-add-next-checker 'lsp 'javascript-eslint)
                                    ))))

  (use-package tree-sitter
    :hook ((typescript-mode . tree-sitter-hl-mode)
       (typescript-tsx-mode . tree-sitter-hl-mode)))

  (use-package tree-sitter-langs
    :after tree-sitter
    :config
    (tree-sitter-require 'tsx)
    (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx)))
#+end_src
* Transitioning from VIM to Emacs
Here is a list of stuff I set out to learn as I began using emacs
after using vim for three years

** Stuff I expect to be an editor
- Vim basics
  - Modal editing
  - Macros
  - surround.vim equivalent
  - sneak.vim equivalent
- File explorer
- File picker
- Autocomplete as I type
  - Variables and function
- Syntax highlighting
- Project-wide search (ag, rg, etc)
- Version control tooling

** Terminology / good to know
1) ~C-x C-c~ to quit emacs
2) ~M-x~ execute command
3) ~C-g~ to escape
4) ~C-h ?~ about help
5) ~C-h t~ opens the emacs tutorial
6) ~C-h k [key or series of keys]~ opens help about that key or string of keys
7) ~C-v~ minibuffer: scroll v one screen
8) ~M-v~ minibuffer: scroll ^ one screen
9) ~C-s~ start incremental search / go to next match
10) ~C-x 0~ kill current window

** Editor configuration
- ~M-x customize~

** Line navigation
1) marks equivalent
2) vim-sneak equivalent
3) vim-surround equivalent
4) wellle/targets.vim equivalent
5) How to toggle comments

** File navigation
- File finder?

** Package manager
- ~M-x package-install RET~

** Code editing
1) emmet?
2) Intellisense / LSP capabilities?
   - Depends. There's stuff like lsp-mode and you can also use something like tide for javascript

** Visuals
1) statusline?
2) doom-modeline
3) icons?
4) Syntax highlighting
   * Colorscheme
5) Hex/RGBA/HSL color previews
6) Whichkey equivalent?

** How to close
- ~C-x C-c~
