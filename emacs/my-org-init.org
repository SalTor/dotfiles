#+title: My emacs configuration via org mode!
#+author: Me. Your friendly neighborhood web developer

* Learnings
Here is a list of stuff I set out to learn as I began using emacs
after using vim for three years

** Terminology / good to know
1) ~C-x C-c~ to quit emacs
2) ~C-h i m~ transient RET
3) ~M-x~ execute extended command
4) ~C-g~ to escape
5) ~C-h ?~ about help
6) ~C-h t~ opens the emacs tutorial
7) ~C-h k~ [key or chord] opens help about that key or string of keys
8) ~C-v~ scroll down one screen
9) ~M-v~ scroll up one screen
10) ~C-s~ start incremental search / go to next match
11) ~C-x 0~ kill current window

** Editor configuration
- ~M-x customize RET~

** Line navigation
1) marks equivalent
2) vim-sneak equivalent
3) vim-surround equivalent
4) wellle/targets.vim equivalent
5) How to toggle comments

** File navigation
- File finder?

** Package manager
- ~M-x package-install RET~

** Code editing
1) emmet?
2) Intellisense / LSP capabilities?
   - Depends. There's stuff like lsp-mode and you can also use something like tide for javascript

** Visuals
1) statusline?
2) doom-modeline
3) icons?
4) Syntax highlighting
   * Colorscheme
5) Hex/RGBA/HSL color previews
6) Whichkey equivalent?

** How to close
- ~C-x C-c~


* Config
** Keybinding utils

#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-create-definer efs/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (efs/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tc" '(counsel-load-theme :which-key "choose theme")))
#+end_src
** Some basic level stuff

#+begin_src emacs-lisp
  ;; Suppress warnings about cl being deprecated
  (setq byte-compile-warnings '(cl-functions))

  ;; Don't create lockfiles
  (setq create-lockfiles nil)

  ;; Don't auto save
  (setq auto-save-default nil)

  ;; Backup files in ~/.saves
  (setq backup-directory-alist '(("." . "~/.config/emacs/.saves")))

  ;; Font
  (set-face-attribute 'default nil :font "Source Code Pro" :height 130)

  ;; Remember where you were last in a file
  (save-place-mode 1)

  ;; Match brackets and other stuff when typing. Another alternative: https://github.com/Fuco1/smartparens
  (electric-pair-mode 1)

  (tool-bar-mode -1)   ;; Hide toolbar
  (menu-bar-mode -1)   ;; Hide menubar
  (scroll-bar-mode -1) ;; Hide scrollbar

  ;; Show column number in addition to line number
  (column-number-mode)

  ;; When on a bracket, highlight its matching one
  (show-paren-mode 1)

  ;; Replace yes-no questions with y-n questions
  (defalias 'yes-or-no-p #'y-or-n-p)

  ;; Hide start message
  (setq inhibit-startup-message t)

  ;; Don't indent with tabs
  (setq-default indent-tabs-mode nil)

  ;; Tab key should generate 4 spaces
  (setq-default tab-width 4)

  (setq indent-line-function 'insert-tab)

  ;; Maximize screen size at start
  (custom-set-variables
      '(initial-frame-alist (quote ((fullscreen . maximized)))))

  ;; Enable having frames for UI
  (use-package posframe)

  ;; Anchor helm so it doesn't scroll the page when it opens
  (setq shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :ratio 0.4)))
#+end_src

Some utility functions used later on in other functions

#+begin_src emacs-lisp
  (defun insert-line-below ()
    "Insert an empty line below the current line."
    (interactive)
    (save-excursion
      (end-of-line)
      (open-line 1)))

  (defun insert-line-above ()
    "Insert an empty line above the current line."
    (interactive)
    (save-excursion
      (end-of-line 0)
      (open-line 1)))
#+end_src

** Helpful stuff
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Garbage collection + startup time report
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-percentage 0.6)
  (setq gc-cons-threshold most-positive-fixnum)

  (defun display-startup-time ()
      "Display startup time."
      (message "Emacs loaded in %s with %d garbage collections."
              (format "%.2f seconds"
                      (float-time
                      (time-subtract after-init-time before-init-time)))
              gcs-done))

  (add-hook 'emacs-startup-hook #'display-startup-time)
#+end_src

** Whichkey for showing keybindings

#+begin_src emacs-lisp
(use-package which-key :config (which-key-mode))
#+end_src
** Org mode setup

#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.5)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.35)
                    (org-level-4 . 1.3)
                    (org-level-5 . 1.4)
                    (org-level-6 . 1.4)
                    (org-level-7 . 1.4)
                    (org-level-8 . 1.4)))
      (set-face-attribute (car face) nil :font "Roboto" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

  (defun sal/org-mode-setup ()
    "Org mode setup."
    (org-indent-mode)
    (auto-fill-mode)
    (visual-line-mode 1))

  (use-package org
    :hook (
           (org-mode . efs/org-font-setup)
           (org-mode . sal/org-mode-setup))
    :custom
    (org-startup-folded 'content)
    :config
    (setq org-ellipsis " ▾"))

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src
** Terminal buffer goodness

Sync up the path used with what's from my default shell .. I think

#+begin_src emacs-lisp
(use-package exec-path-from-shell)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src
** Flycheck syntax checker tool

#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))

  (setq flycheck-javascript-eslint-executable "eslint_d")

  (use-package flycheck-posframe
    :after flycheck
    :config (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))

  ;; Disable jshint in favour of eslint
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))

  ;; use eslint with rjsx-mode for (j|t)sx? files
  (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
  (flycheck-add-mode 'javascript-eslint 'typescript-mode)

  ;; customize flycheck temp file prefix
  (setq-default flycheck-temp-prefix ".flycheck")

  ;; disable json-jsonlist checking for json files
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(json-jsonlist)))
#+end_src

** Web mode

For files with HTML

#+begin_src emacs-lisp
  (use-package web-mode)

  (use-package emmet-mode
    :hook ((css-mode . emmet-mode)
           (scss-mode . emmet-mode)
           (web-mode . emmet-mode)
           (rjsx-mode . (lambda ()
                          (emmet-mode)
                          (setq-local emmet-expand-jsx-className? t) ;; default nil
                          ))))
#+end_src

** Interactive interface for completion

#+begin_src emacs-lisp
  (use-package ivy
    :config
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-initial-inputs-alist nil) ;; no regexp by default
    (setq ivy-re-builders-alist ;; configure regexp engine.
          '((t   . ivy--regex-ignore-order))) ;; allow input not in order
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill)))

  (use-package all-the-icons-ivy
    :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :config
    (setq ivy-virtual-abbreviate 'abbreviate
          ivy-rich-path-style 'abbrev)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
    (ivy-rich-mode 1))

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1) ;; Remember sorting across sessions
    (ivy-prescient-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))
#+end_src

** Projectile: File finder

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :custom ((projectile-completion-system 'ivy))
    :config
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    (projectile-mode))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

  (use-package ibuffer-projectile)
  (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-projectile-set-filter-groups)
        (unless (eq ibuffer-sorting-mode 'alphabetic)
          (ibuffer-do-sort-by-alphabetic))))
#+end_src

** Sidebar project explorer

#+begin_src emacs-lisp
  (use-package neotree
    ;; :commands neotree-make-executor
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)
          neo-hide-cursor t
          neo-window-width 30
          projectile-switch-project-action 'neotree-projectile-action)
    :general
    (:states 'normal
             :keymaps 'neotree-mode-map
             "md" 'neotree-delete-node
             "ma" 'neotree-create-node
             "mm" 'neotree-rename-node
             "R" 'neotree-refresh
             "RET" 'neotree-enter
             "?" 'describe-mode
             "H" 'neotree-hidden-file-toggle
             "q" 'neotree-hide
             "u" 'neotree-select-up-node))
#+end_src

** Visual goodness
*** Line numbers + highlight current line
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  (global-hl-line-mode 1) ;; Highlight the current line
  (set-face-background 'hl-line (face-attribute 'mode-line :background))
#+end_src
*** Color support
#+begin_src emacs-lisp
  ;; (use-package rainbow-mode) ;; Show hex colors as colors!

  ;; (add-hook 'css-mode-hook 'my-rainbow-mode-hook)
  ;; (add-hook 'web-mode-hook 'my-rainbow-mode-hook)
  ;; (defun my-rainbow-mode-hook ()
  ;;   (rainbow-mode 1))
#+end_src
*** Theme: DOOM
The doom themes are pretty cool

#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-themes
    :config
    (defvar doom-themes-treemacs-theme "doom-colors")
    (load-theme 'doom-gruvbox t)
    (doom-themes-visual-bell-config)
    :custom
    (doom-gruvbox-dark-variant "medium"))

  (use-package doom-modeline :init (doom-modeline-mode 1))
#+end_src
*** Show open buffers as tabs!
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :demand
    :config
    (setq centaur-tabs-set-bar 'under
          x-underline-at-descent-line t
          centaur-tabs-set-icons t
          centaur-tabs-gray-out-icons 'buffer
          centaur-tabs-set-modified-marker t
          centaur-tabs-modified-marker "•")
    (centaur-tabs-headline-match)
    (centaur-tabs-group-by-projectile-project)
    (centaur-tabs-mode t))
#+end_src
** Dashboard for opening projects / bookmarks / MRU

#+begin_src emacs-lisp
(use-package dashboard
  :config
  (setq dashboard-set-heading-icons t
	;; dashboard-projects-switch-function 'projectile-switch-project
	dashboard-startup-banner 'logo
	dashboard-center-content nil
	dashboard-set-navigator t
        dashboard-set-file-icons t)
  (setq dashboard-items '((recents  . 10)
                        (bookmarks . 5)
                        (projects . 5)))
  (dashboard-setup-startup-hook))
#+end_src

** Preparation for evil mode

[[https://github.com/apchamberlain/undo-tree.el][Undo tree]] is for evil mode's `U` and `C-r` history

[[https://github.com/gregsexton/origami.el][Origami]] is for evil mode's folding capabilities

#+begin_src emacs-lisp
  (use-package undo-tree)
  (use-package origami :config (global-origami-mode))
  (use-package drag-stuff
    :config
    (drag-stuff-mode t))
#+end_src

** EVIL mode ! >:)

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (add-hook 'evil-local-mode-hook 'turn-on-undo-tree-mode)
    :custom
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t)
    (evil-undo-system 'undo-tree)
    :config
    (evil-set-initial-state 'Custom-mode 'normal)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (evil-mode 1))

  ;; Make sure evil bindings work in all emacs windows
  (setq evil-want-keybinding nil) ;; Evil collection requirement
  (use-package evil-collection :after evil)
  (when (require 'evil-collection nil t)
    (evil-collection-init))

  ;; mappings
  (define-key evil-normal-state-map (kbd "U") 'evil-redo)

  (define-key evil-visual-state-map (kbd "J") 'drag-stuff-down)
  (define-key evil-visual-state-map (kbd "K") 'drag-stuff-up)

  (define-key evil-normal-state-map (kbd "gl") 'evil-end-of-line)

  (define-key evil-normal-state-map (kbd "[ SPC") 'insert-line-above)
  (define-key evil-normal-state-map (kbd "] SPC") 'insert-line-below)
  (define-key evil-normal-state-map (kbd "C-n") 'next-error)
  (define-key evil-normal-state-map (kbd "C-p") 'previous-error)

  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

  (use-package evil-leader
    :config (global-evil-leader-mode))

  ;; Leader key
  (evil-leader/set-leader "SPC")

  (evil-leader/set-key "x" 'counsel-M-x)

  (evil-leader/set-key "qq" 'save-buffers-kill-terminal)

  (evil-leader/set-key
    "u" 'universal-argument)

  ;; Window
  (evil-leader/set-key
    "wo" 'other-window
    "wr" 'evil-window-rotate-upwards
    "w/" 'evil-window-vsplit
    "w-" 'evil-window-split
    "wh" 'evil-window-left
    "wj" 'evil-window-down
    "wk" 'evil-window-up
    "wl" 'evil-window-right
    ;; "wu" 'winner-undo
    ;; "wU" 'winner-redo
    )

  (evil-leader/set-key-for-mode
    'org-mode "es" 'org-edit-special)

  (evil-leader/set-key "eq" 'org-edit-src-exit)

  ;; Comments
  (evil-leader/set-key
    "cc" 'comment-line)
  (evil-leader/set-key-for-mode
    'evil-visual-state "cc" 'evilnc-comment-or-uncomment-lines)

  ;; Project
  (evil-leader/set-key
    "ps" 'centaur-tabs-switch-group
    "po" 'projectile-switch-project)

  ;; Search
  (evil-leader/set-key
    "sp" 'counsel-projectile-rg
    "sf" 'swiper)

  (defun show-file-name ()
    "Show the full path file name in the minibuffer."
    (interactive)
    (message (buffer-file-name))
    (kill-new (file-truename buffer-file-name)))

  ;; File
  (evil-leader/set-key
    "fe" 'neotree
    "fj" 'neotree-find
    "fr" 'rename-file
    "f5" 'load-file
    "fs" 'evil-write-all
    "fy" 'show-file-name
    "f.f" 'dired-jump
    "f.s" 'save-buffer)

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      (kbd "RET" ) 'dired-single-buffer
      "l" 'dired-single-buffer
      ))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  ;; Buffer
  (evil-leader/set-key
    "wq" 'delete-window
    "h" 'help-command
    "bd" 'kill-this-buffer
    "," 'counsel-projectile-find-file
    ";" 'counsel-switch-buffer
    "TAB" 'evil-switch-to-windows-last-buffer)

  (global-set-key (kbd "C-;") 'counsel-switch-buffer)

  (evil-leader/set-key
    "tt" 'vterm)

  (use-package evil-nerd-commenter)

  (use-package evil-surround :config (global-evil-surround-mode 1))

  (use-package evil-goggles
    :config
    (evil-goggles-mode)
    (setq evil-goggles-duration 0.500
          evil-goggles-blocking-duration 0.001
          evil-goggles-async-duration 0.900
          evil-goggles-enable-paste nil
          evil-goggles-enable-delete nil
          evil-goggles-enable-change nil
          evil-goggles-enable-indent nil
          evil-goggles-enable-join nil
          evil-goggles-enable-fill-and-move nil
          evil-goggles-enable-paste nil
          evil-goggles-enable-shift nil
          evil-goggles-enable-surround nil
          evil-goggles-enable-commentary nil
          evil-goggles-enable-nerd-commenter nil
          evil-goggles-enable-replace-with-register nil
          evil-goggles-enable-set-marker nil
          evil-goggles-enable-undo nil
          evil-goggles-enable-redo nil
          evil-goggles-enable-record-macro nil))
#+end_src

** Helpful post-evil stuff
   #+begin_src emacs-lisp

     (use-package hydra
       :defer t)

     (defhydra hydra-text-scale (:timeout 4)
       "scale text"
       ("j" text-scale-increase "in")
       ("k" text-scale-decrease "out")
       ("f" nil "finished" :exit t))

     (efs/leader-keys
       "tf" '(hydra-text-scale/body :which-key "scale text"))

     (defhydra hydra-scroll-page (:timeout 4)
       "scroll the page"
       ("k" evil-scroll-up "up")
       ("j" evil-scroll-down "down")
       ("f" nil "finished" :exit t))

     (efs/leader-keys
       "ts" '(hydra-scroll-page/body :which-key "scroll page"))
   #+end_src

** Avy: vim-sneak equivalent

Quickly navigate anywhere in the visible file with 2 character
filtering followed by RET to go there

#+begin_src emacs-lisp
    (use-package avy
        :custom
        (avy-all-windows nil))
    (define-key evil-normal-state-map (kbd "s") 'avy-goto-char-2-below)
    (define-key evil-normal-state-map (kbd "S") 'avy-goto-char-2-above)
    (define-key evil-visual-state-map (kbd "s") 'avy-goto-char-2)
#+end_src

** Company: Auto-complete goodness

[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

[[https://github.com/sebastiencs/company-box][Company box]] adds some cool icons

[[https://github.com/company-mode/company-quickhelp][Company quickhelp]] adds overlay documentation for the options company provides

#+begin_src emacs-lisp
  (use-package company
    :hook (lsp-mode . company-mode)
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (company-tng-mode)
    (setq company-idle-delay 0
          company-minimum-prefix-length 1
          company-selection-wrap-around t))

    (use-package company-box :hook (company-mode . company-box-mode))

    (use-package pos-tip)
    (use-package company-quickhelp :config (company-quickhelp-mode))

    (eval-after-load 'company
      '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin))

    ;; aligns annotation to the right hand side
    (setq company-tooltip-align-annotations t)
#+end_src

** Tide: Typescript Interactive Development Environment

#+begin_src emacs-lisp
  (defun setup-tide-mode ()
    "Set up tide."
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (defvar flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (company-mode +1))

  (add-hook 'typescript-mode-hook #'setup-tide-mode)
#+end_src

** Language Server Protocol (LSP)

LSP provides an alternative way to provide smart language
development. It's not clear to me whether using LSP will replace my
use of TIDE but I suspect it will

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (evil-leader/set-key-for-mode 'lsp-mode "gd" 'lsp-find-definition)
    (lsp-enable-which-key-integration t))

  (defun sal-lsp-ui-doc-toggle()
    "Toggle focus and unfocus `lsp-ui-doc-(show|hide)."
    (interactive)
    (if (lsp-ui-doc--frame-visible-p) (lsp-ui-doc-hide)
      (lsp-ui-doc-show)))

  (use-package lsp-ui
    :init
    (evil-leader/set-key "ca" 'helm-lsp-code-actions)
    (evil-normalize-keymaps)
    :config
    (setq lsp-signature-function 'lsp-signature-posframe)
    :hook
    (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-sideline-enable nil)
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-enable-completion-at-point t)
    (lsp-auto-execute-action nil)
    (lsp-ui-doc-position 'at-point))

  (use-package lsp-treemacs
    :after lsp)

  (use-package helm)

  (use-package helm-lsp
    :after lsp
    :config
    (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))

  ;; consider using https://elpy.readthedocs.io/en/latest/
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                           (require 'lsp-python-ms)
                           (lsp))))  ; or lsp-deferred
#+end_src

** Javascript/Typescript setup

#+begin_src emacs-lisp
    (setq js2-mode-show-parse-errors nil)
    (setq js2-mode-show-strict-warnings nil)

    (use-package prettier-js
      :after (rjsx-mode)
      :hook (rjsx-mode . prettier-js-mode))

    (use-package typescript-mode
      :mode "\\.ts\\'"
      :hook (typescript-mode . lsp-deferred))
#+end_src

*** Support for .jsx/.tsx files

#+begin_src emacs-lisp
  (use-package rjsx-mode
    :mode ("\\.jsx?\\$" . rjsx-mode)
    :mode ("\\.tsx\\'$" . rjsx-mode)
    :hook (rjsx-mode . lsp-deferred))
#+end_src

** Python setup

If you open a file in a project that has a python virtual environment
made available to you, make use of it!

#+begin_src emacs-lisp
  (use-package python-mode
    :hook (python-mode . lsp-deferred))

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))
#+end_src

** Magit - GIT

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (evil-leader/set-key
    "gs" 'magit-status)
#+end_src

** Terminal mode
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000))

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src

** Window management
#+begin_src emacs-lisp
  (use-package perspective
    :custom
    (persp-state-default-file t)
    :config
    (persp-mode))
#+end_src
