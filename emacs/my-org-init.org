#+title: My emacs configuration via org mode!
#+author: Me. Your friendly neighborhood web developer

* Load my custom scripts
#+begin_src emacs-lisp
  (load-file "~/dotfiles/emacs/modules/sal-functions.el")
  (load-file "~/dotfiles/emacs/modules/org-agenda-functions.el")
  ;; (add-to-list 'load-path  "~/dotfiles/emacs/project-setups/capsule-cw-mfe.el")
#+end_src
* Package management
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src
* Use $PATH
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (setenv "SHELL" "/bin/zsh")
    (setq shell-file-name "/bin/zsh"))
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src
* Search via Ripgrep/Deadgrep
#+begin_src emacs-lisp
  (use-package ripgrep)
  (use-package deadgrep)
#+end_src
* Keybindings via General.el + Hydra + Embark
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")
    (leader-keys
      "T"  '(:ignore t :which-key "toggles")
      "Tn" '(sal-switch-linum-mode :which-key "toggle linum mode relative/absolute")))

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (leader-keys
    "tf" '(hydra-text-scale/body :which-key "scale text"))

  (defhydra hydra-scroll-page (:timeout 4)
    "scroll the page"
    ("k" evil-scroll-up "up")
    ("j" evil-scroll-down "down")
    ("f" nil "finished" :exit t))

  (leader-keys
    "ts" '(hydra-scroll-page/body :which-key "scroll page"))

  (use-package embark ;; Keybinds for minibuffer commands
    :bind (("C-." . embark-act))
    :config
    (embark-define-keymap sal-embark-file-map
                          "Keymap for actions for tab-bar tabs (when mentioned by name)."
                          ("-" sal-split-below)
                          ("/" sal-split-right))
    (add-to-list 'embark-keymap-alist '(file . sal-embark-file-map))

    (setq embark-action-indicator
          (lambda (map _target)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))
#+end_src
* Improved help docs
Improve Emacs's built-in docs with more contextual info
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key))

  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.

  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

  (leader-keys "h" 'help-command)
#+end_src
* Menu Completion
#+begin_src emacs-lisp
  (use-package consult
    :config
    (setq consult-preview-key (kbd "C-\\")))

  (use-package selectrum
    :bind (:map selectrum-minibuffer-map
                ("C-j" . selectrum-next-candidate)
                ("C-k" . selectrum-previous-candidate))
    :config
    (selectrum-mode +1))

  (use-package selectrum-prescient
    :config
    (selectrum-prescient-mode +1) ;; make sorting and filtering more intelligent
    (prescient-persist-mode +1)   ;; save command history on disk: sorting gets more intelligent over time
    )

  (use-package marginalia ;; Annotate minibuffer commands
    :after evil
    :config
    (add-to-list 'marginalia-prompt-categories '("Find file" . file))
    (marginalia-mode))
#+end_src
* Company mode
#+begin_src emacs-lisp
  (use-package company
    :bind (:map company-mode-map
                ("C-c y" . company-set-selection))
    :config
    (company-tng-mode)
    (setq company-minimum-prefix-length 1)
    (setq company-tooltip-align-annotations t)
    (setq company-selection-wrap-around t)
    )

  (add-hook 'after-init-hook 'global-company-mode)


  (use-package company-box :hook (company-mode . company-box-mode)) ;; Icons in company dropdowns

  (use-package pos-tip)

  (use-package company-quickhelp :config (company-quickhelp-mode))

  (eval-after-load 'company '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin))
#+end_src
* Syntax checking via Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode)
    :config
    (setq-default flycheck-emacs-lisp-load-path 'inherit
                  flycheck-disabled-checker '(emacs-list-checkdoc)
                  flycheck-temp-prefix ".flycheck"
                  flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint json-jsonlist)))
    (setq flycheck-locate-config-file-functions '(flycheck-locate-config-file-ancestor-directories
                                                  flycheck-locate-config-file-by-path)
          flycheck-check-syntax-automatically '(save
                                                ;; idle-change
                                                ;; new-line
                                                mode-enabled)
          flycheck-display-errors-delay 0.3
          flycheck-flake8rc '(".flake8")
          flycheck-javascript-eslint-executable "eslint_d")

    (leader-keys
      "el" 'flycheck-list-errors
      "en" 'flycheck-next-error
      "ep" 'flycheck-previous-error)
    )

  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
  (flycheck-add-mode 'javascript-eslint 'typescript-mode)
  (flycheck-add-mode 'javascript-eslint 'typescript-tsx-mode)

  (use-package posframe)

  (use-package flycheck-posframe
    :after flycheck
    :config
    (setq flycheck-posframe-error-prefix "■ ")
    (setq flycheck-posframe-info-prefix "■ ")
    (setq flycheck-posframe-prefix "■ ")
    (setq flycheck-posframe-warning-prefix "■ ")

    (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))
#+end_src
* Code formating via Prettier/Black/Eslint/Editorconfig
#+begin_src emacs-lisp
  (use-package apheleia
    :hook ((web-mode
            typescript-mode
            typescript-tsx-mode
            css-mode
            scss-mode
            rjsx-mode
            vue-mode
            json-mode) . apheleia-mode)
    :config
    (apheleia-global-mode +1)
    (add-to-list 'apheleia-mode-alist '(typescript-tsx-mode prettier))
    (add-to-list 'apheleia-mode-alist '(python black)))

  (use-package eslintd-fix
    :hook ((web-mode
            typescript-mode
            typescript-tsx-mode
            css-mode
            scss-mode
            rjsx-mode
            json-mode) . eslintd-fix-mode))

  (use-package editorconfig :config (editorconfig-mode 1))
#+end_src
* EVIL mode
#+begin_src emacs-lisp
  ;; START --- My evil config uses these packages
  (use-package undo-fu :config (global-undo-tree-mode -1))
  (use-package origami :config (global-origami-mode))
  (use-package drag-stuff :config (drag-stuff-mode t)) ;; Used for shortcut to move lines up/down
  ;; END

  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq-default evil-symbol-word-search t)
    (add-hook 'evil-local-mode-hook 'turn-on-undo-tree-mode)
    :custom
    (evil-want-C-u-scroll t)
    (evil-want-C-i-jump t)
    (evil-want-Y-yank-to-eol t)
    (evil-undo-system 'undo-fu)
    (evil-split-window-below t)
    (evil-vsplit-window-right t)
    :config
    (evil-set-initial-state 'Custom-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (evil-mode 1))

  (general-evil-setup t) ;; integrate w/ general.el

  (general-define-key
   :states '(normal)
   "u"    'undo-fu-only-undo
   "U"    'undo-fu-only-redo
   "\C-r" 'undo-fu-only-redo
   "gm"   'evil-search-word-forward
   "gl"   'evil-end-of-line
   "gh"   'evil-beginning-of-line
   )

  (define-key evil-normal-state-map (kbd "[ SPC") 'insert-line-above)
  (define-key evil-normal-state-map (kbd "] SPC") 'insert-line-below)

  (general-define-key
   :states '(visual)
   "J" 'drag-stuff-down
   "K" 'drag-stuff-up)

  ;; Use <escape> like you use <C-g> across emacs
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

  (use-package evil-surround :config (global-evil-surround-mode 1))

  (use-package evil-goggles
    :custom
    (evil-goggles-yank-face ((t (:inherit evil-goggles-default-face :background "DarkOrange1"))))
    :config
    (evil-goggles-mode)
    (setq evil-goggles-duration 0.500
          evil-goggles-blocking-duration 0.001
          evil-goggles-async-duration 0.900
          evil-goggles-enable-paste nil
          evil-goggles-enable-delete nil
          evil-goggles-enable-change nil
          evil-goggles-enable-indent nil
          evil-goggles-enable-join nil
          evil-goggles-enable-fill-and-move nil
          evil-goggles-enable-paste nil
          evil-goggles-enable-shift nil
          evil-goggles-enable-surround nil
          evil-goggles-enable-commentary nil
          evil-goggles-enable-nerd-commenter nil
          evil-goggles-enable-replace-with-register nil
          evil-goggles-enable-set-marker nil
          evil-goggles-enable-undo nil
          evil-goggles-enable-redo nil
          evil-goggles-enable-record-macro nil))

  (use-package evil-nerd-commenter)
#+end_src
** Evil Collection
A set of keybindings for evil-mode
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)

  (use-package evil-collection
    :custom
    (evil-collection-magit-state 'emacs)
    (evil-collection-want-unimpaired-p nil))

  (evil-collection-init)
#+end_src
** Evil leader
=<leader>= key for evil-mode
#+begin_src emacs-lisp
  (use-package evil-leader :config (global-evil-leader-mode))

  (evil-leader/set-leader "SPC")

  (leader-keys
    "u"  'universal-argument       ;; <C-u> is the default, I use that for scrolling up
    "x"  'execute-extended-command ;; <M-x> is the defualt, which is awkward to type
    "qq" 'save-buffers-kill-terminal
    "cc" 'comment-line)
#+end_src
* Org mode
#+begin_src emacs-lisp
  (add-hook 'org-agenda-mode-hook 'sal-agenda-setup)

  (general-define-key
   :prefix "C-c"
   "a" 'air-pop-to-org-agenda
   "t" 'air-org-agenda-capture
   "c" 'org-capture)

  (use-package org
    :hook ((org-mode . sal/org-mode-setup)
           (org-mode . visual-line-mode)
           (org-mode . org-indent-mode)
           (org-mode . (lambda () (setq-local evil-auto-indent nil))))
    :bind (:map org-mode-map
           ("C-c e" . org-edit-special)
           :map org-src-mode-map
           ("C-c s" . org-edit-src-exit))
    :custom
    (org-directory "~/org")
    (org-hide-emphasis-markers t)
    (org-agenda-files (list "~/org"))
    :config
    (setq org-log-done t)
    (setq org-agenda-custom-commands
          '(("d" "Daily agenda and all TODOs"
             ((tags "PRIORITY=\"A\""
                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done 'meeting))
                     (org-agenda-overriding-header "High-priority unfinished tasks:")))
              (agenda "" ((org-agenda-ndays 1)))
              (alltodo ""
                       ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                       (air-org-skip-subtree-if-priority ?A)
                                                       (org-agenda-skip-if nil '(scheduled deadline))))
                        (org-agenda-overriding-header "ALL normal priority tasks:"))))
             ;; ((org-agenda-compact-blocks t))
             )))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "IN-PROGRESS(p)" "WAITING(w)" "MEETING(m)" "|" "DONE(x)")))
    (setq org-return-follows-link t)
    (setq org-ellipsis " ▾")
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/org/agenda.org" "Tasks")
             "* TODO %?\n%u\n%a\n  %i")
            ("m" "Meeting" entry (file+headline "~/org/agenda.org" "Meetings")
             "* MEETING with %? :MEETING:\n%i")
            ("c" "Calendar" entry (file+datetree "~/org/calendar.org")
             "* CAL %? :EVENT:\n%i")
            ("i" "Idea" entry (file+headline "~/org/agenda.org" "Ideas")
             "* %? :IDEA: \n%u\n%a\n  %i")
            ("o" "On-Call" entry (file+datetree "~/org/on-call.org")
             "* %?\n  %i")
            )))

  (use-package deft
    :after org
    :config
    (leader-keys
      "od" 'deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/org-roam/"))

  (use-package org-roam
    :after (org deft)
    :custom
    (org-roam-directory "~/org-roam")
    (org-roam-completion-everywhere t)
    :bind-keymap ("C-c n" . org-roam-dailies-map)
    :bind ((:map org-roam-dailies-map
                 ("n" . org-roam-dailies-capture-today) ;; neumonic "now"; This is provided by default
                 ("t" . org-roam-dailies-capture-tomorrow)
                 ("y" . org-roam-dailies-capture-yesterday)))
    :config
    (leader-keys
      "or" 'org-roam
      "of" 'org-roam-find-file
      "oc" 'org-roam-capture
      "oi" 'org-roam-insert)
    :init
    (org-roam-mode))
#+end_src
* Project/file management
#+begin_src emacs-lisp
  (leader-keys
    "sp" 'deadgrep
    "fe" 'neotree-projectile-action
    "fj" 'dired-jump
    "fr" 'rename-file
    "f5" 'load-file
    "fs" 'evil-write-all
    "fy" 'show-file-name
    "f.s" 'save-buffer)
#+end_src
** Magit
#+begin_src emacs-lisp
  (setq auto-revert-check-vc-info t) ;; modeline integration

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config
    (general-define-key
      :keymaps 'magit-status-mode-map
      "C-j" 'magit-section-forward
      "C-k" 'magit-section-backward
      "M-j" 'magit-section-forward-sibling
      "M-k" 'magit-section-backward-sibling)
    (setq magit-refresh-status-buffer nil)
    ;; When 'C-c C-c' is pressed in the magit commit message buffer,
    ;;   delete the magit-diff buffer related to the current repo.
    (add-hook 'git-commit-setup-hook
              (lambda ()
                (add-hook 'with-editor-post-finish-hook
                          #'kill-magit-diff-buffer-in-current-repo
                          nil t))))  ; the t is important

  (leader-keys "gs" 'magit-status)
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    (projectile-mode))

  (leader-keys
    "," 'projectile-find-file
    "po" 'projectile-switch-project)
#+end_src
** Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :config
    (setq dired-dwim-target t)
    (evil-collection-define-key 'normal 'dired-mode-map
      "c" 'find-file
      "h" 'dired-up-directory
      "l" 'dired-find-file)
    (let ((gls "/usr/local/bin/gls"))
      (if (file-exists-p gls) (setq insert-directory-program gls))))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands
    (dired dired-jump)
    :config
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))
#+end_src
** Neotree
#+begin_src emacs-lisp
  (use-package neotree
    :defer 3
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)
          neo-hide-cursor t
          neo-window-width 30)
    :general
    (:states 'normal
             :keymaps 'neotree-mode-map
             "md" 'neotree-delete-node
             "ma" 'neotree-create-node
             "mm" 'neotree-rename-node
             "R" 'neotree-refresh
             "RET" 'neotree-enter
             "s" 'avy-goto-word-1
             "H" 'neotree-hidden-file-toggle
             "?" 'describe-mode
             "h" 'neotree-select-up-node
             "l" 'neotree-enter
             "q" 'neotree-hide))
#+end_src
* Buffer management
#+begin_src emacs-lisp
  (global-set-key (kbd "C-;") 'ibuffer)
  (global-set-key (kbd "C-/") 'ibuffer)

  (leader-keys
    ";" 'switch-to-buffer
    "/" 'switch-to-buffer
    "TAB" 'evil-switch-to-windows-last-buffer
    "br" 'rename-buffer
    "bd" 'kill-this-buffer)

  (use-package avy :custom (avy-all-windows nil))

  (leader-keys "sf" 'consult-line)

  (general-define-key
    :states '(normal visual)
    "s" 'avy-goto-char-2)
#+end_src
** Ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer-projectile)
  (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-projectile-set-filter-groups)))

  (add-hook 'ibuffer-hook #'ibuffer-jump-to-last-buffer)
#+end_src
** Perspective.el
This allows us to group buffers and window layouts into different virtual "workspaces". This is particularly useful when working with multiple projects and you don't want to clutter your buffer list
#+begin_src emacs-lisp
  (use-package perspective
    :commands persp-state-load
    :custom
    (persp-state-default-file "~/Documents/perspective-saves")
    :init
    (persp-mode))

  (leader-keys
    "s;" 'persp-switch
    "s/" 'persp-switch
    "ss" 'persp-set-buffer
    "sr" 'persp-rename)
#+end_src
* Window management
#+begin_src emacs-lisp
  (winner-mode +1)

  (defhydra hydra-winner (:timeout 4)
    "scale text"
    ("k" winner-redo "winner-redo")
    ("j" winner-undo "winner-undo")
    ("f" nil "finished" :exit t))

  (leader-keys
    "w," '(hydra-winner/body :which-key "winner")
    "wq" 'delete-window
    "wo" 'delete-other-windows
    "w TAB" 'other-window
    "wr" 'evil-window-rotate-upwards
    "w/" 'evil-window-vsplit
    "w-" 'evil-window-split
    "wh" 'evil-window-left
    "wj" 'evil-window-down
    "wk" 'evil-window-up
    "wl" 'evil-window-right
    "w=" 'balance-windows)
#+end_src
* Terminal in emacs
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000)
    :hook
    (vterm-mode . (lambda ()
                    (setq-local hl-line-mode nil)
                    (setq-local line-number-mode nil)
                    (setq-local column-number-mode nil))))

  (use-package multi-vterm
    :config
    (define-key vterm-mode-map [return] #'vterm-send-return)

    (setq vterm-keymap-exceptions nil)
    (general-define-key
      :states  '(insert)
      :keymaps 'vterm-mode-map
      "C-e" 'vterm--self-insert
      "C-f" 'vterm--self-insert
      "C-a" 'vterm--self-insert
      "C-v" 'vterm--self-insert
      "C-b" 'vterm--self-insert
      "C-w" 'vterm--self-insert
      "C-u" 'vterm--self-insert
      "C-n" 'vterm--self-insert
      "C-m" 'vterm--self-insert
      "C-p" 'vterm--self-insert
      "C-j" 'vterm--self-insert
      "C-k" 'vterm--self-insert
      "C-r" 'vterm--self-insert
      "C-t" 'vterm--self-insert
      "C-g" 'vterm--self-insert
      "C-c" 'vterm--self-insert
      "C-SPC" 'vterm--self-insert

      "C-d" #'evil-normal-state)

    (general-define-key
      :states  '(normal)
      :keymaps 'vterm-mode-map
      ",c"        'multi-vterm-prev
      "i"         'evil-insert-resume
      "<return>"  'evil-insert-resume
      "<prior>"   'scroll-down-command
      "<next>"    'scroll-up-command

      "C-d"       #'evil-scroll-down)
    )

  (use-package eterm-256color :hook (vterm-mode . eterm-256color-mode))

  ;; Terminal
  (leader-keys
    "t" '(:ignore t :which-key "terminal")
    "tt" (lambda ()
           (interactive)
           (sal-cd-project-root)
           (multi-vterm))
    "t/" (lambda ()
           (interactive)
           (split-window-right)
           (other-window 1)
           (sal-cd-project-root)
           (multi-vterm))
    "td" (lambda ()
           (interactive)
           (split-window-below)
           (other-window 1)
           (sal-cd-project-root)
           (multi-vterm)))
#+end_src
* YASnippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1)
    (setq yas-snippet-dirs
        '("~/.emacs.d/snippets")))
#+end_src
* LSP Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :config
    (setq lsp-idle-delay 0.5
          lsp-auto-guess-root t
          lsp-restart 'auto-restart
          lsp-enable-completion-at-point t
          lsp-enable-symbol-highlighting t
          lsp-modeline-diagnostics-enable t
          lsp-diagnostic-package :none
          lsp-log-io nil ;; Don't log everything = speed
          lsp-lens-enable nil
          lsp-headerline-breadcrumb-enable nil
          lsp-signature-auto-activate nil
          lsp-modeline-code-actions-enable nil
          lsp-eslint-enable nil
          lsp-enable-on-type-formatting nil
          lsp-enable-folding nil
          lsp-enable-imenu nil
          lsp-enable-snippet nil
          read-process-output-max (* 1024 1024)) ;; 1mb
    (add-hook 'web-mode-hook #'lsp-flycheck-enable)
    (with-eval-after-load 'lsp-mode
      (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))
    :custom
    (lsp-eldoc-render-all t)
    (lsp-enable-which-key-integration t)
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-rust-analyzer-server-display-inlay-hints t))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :bind (:map lsp-mode-map
                ("M-d" . xref-find-definitions)
                ("M-r" . xref-find-references)
                ("M-t" . lsp-find-type-definition))
    :config
    (setq lsp-ui-doc-enable t
          lsp-ui-doc--from-mouse nil
          lsp-ui-doc-use-childframe t
          lsp-ui-doc-position 'top
          lsp-ui-doc-include-signature t
          lsp-ui-sideline-enable nil
          lsp-ui-flycheck-enable t
          lsp-ui-flycheck-list-position 'right
          lsp-ui-flycheck-live-reporting t)
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
    :custom
    (lsp-ui-peek-enable t)
    (lsp-ui-peek-show-directory t)
    (lsp-ui-peek-list-width 60)
    (lsp-ui-peek-peek-height 25)
    (lsp-ui-peek-fontify 'on-demand))

  (require 'lsp-diagnostics)
  (lsp-diagnostics-flycheck-enable)
#+end_src
* Web mode
#+begin_src emacs-lisp
  (use-package web-mode
    :defer 2
    :hook (web-mode . lsp-deferred)
    :mode (("\\.html\\'" . web-mode))
    :commands web-mode)
#+end_src
* Emmet mode
#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook ((typescript-tsx-mode . emmet-mode)
           (web-mode . emmet-mode)
           (css-mode . emmet-mode)
           (scss-mode . emmet-mode)))

  (define-key evil-insert-state-map (kbd "C-,") 'emmet-expand-line)
#+end_src
* REPL
#+begin_src emacs-lisp
  (use-package nodejs-repl
    :config
    (leader-keys
     "rl" 'nodejs-repl-send-line
     "rr" 'nodejs-repl-send-region
     "rb" 'nodejs-repl-send-buffer))
#+end_src
* RJSX mode
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :hook (rjsx-mode . lsp-deferred)
    :mode (("\\.js\\'" . rjsx-mode)
           ("\\.jsx\\'" .  rjsx-mode)))
#+end_src
* Languages
** Python
#+begin_src emacs-lisp
  (setq pyvenv-virtualenvwrapper-python "python3")
  (setenv "WORKON_HOME" "~/.local/share/virtualenvs/")

  (use-package pyvenv
    :config
    (setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
    ;; Set correct Python interpreter
    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (call-interactively #'lsp-workspace-restart)
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3"))))
    (pyvenv-mode +1))

  (use-package pipenv
    :hook (python-mode . pipenv-mode)
    :init
    (setq
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended))

  (use-package pylint)

  (use-package lsp-python-ms
    :after (lsp-mode)
    :hook
    ((python-mode . (lambda ()
                      (require 'lsp-python-ms)
                      (lsp)
                      (flycheck-add-next-checker 'lsp 'python-flake8)
                      (flycheck-add-next-checker 'python-flake8 'python-pylint)
                      (message "Added flycheck checkers."))))
    :init
    ;; (setq lsp-python-ms-executable (executable-find "pyls"))
    (setq lsp-python-ms-auto-install-server t))
#+end_src
** Javascript/Typescript
#+begin_src emacs-lisp
  (setq js2-mode-show-parse-errors nil)
  (setq js2-mode-show-strict-warnings nil)

  (use-package typescript-mode
    :init
    (define-derived-mode typescript-tsx-mode typescript-mode "tsx")
    :config
    :mode ("\\.tsx?\\'" . typescript-tsx-mode)
    :hook ((typescript-tsx-mode . (lambda ()
                                    (lsp-deferred)
                                    ;; (flycheck-add-next-checker 'lsp 'javascript-eslint)
                                    ))))

  (use-package tree-sitter
    :hook ((typescript-mode . tree-sitter-hl-mode)
           (typescript-tsx-mode . tree-sitter-hl-mode)))

  (use-package tree-sitter-langs
    :after tree-sitter
    :config
    (tree-sitter-require 'tsx)
    (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx))
    (add-to-list 'tree-sitter-major-mode-language-alist '(rustic-mode . rust)))
#+end_src
** Vue
#+begin_src emacs-lisp
  (use-package vue-mode :straight (vue-mode :type git :host github :repo "AdamNiederer/vue-mode"))

  (use-package vue-mode
    :mode "\\.vue\\'"
    :config
    (add-hook 'vue-mode-hook #'lsp))
#+end_src
** C#
#+begin_src emacs-lisp
  (use-package csharp-mode
    :hook ((csharp-mode . lsp-deferred))
    :config
    (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))

  (setq lsp-csharp-server-path "~/.emacs.d/.cache/lsp/omnisharp-roslyn/latest/run")
#+end_src
** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :config
    (setq lsp-lua-diagnostics-disable '("lowercase-global"))
    :hook ((lua-mode . (lambda ()
                         (lsp-deferred)))))
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rustic
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu))
    :config
    (setq rustic-lsp-server 'rust-analyzer)
    (setq rustic-format-on-save t))
#+end_src
* Visuals
#+begin_src emacs-lisp
  (use-package rainbow-mode :config (rainbow-mode))
#+end_src
** Modeline
#+begin_src emacs-lisp
  (use-package minions :config (minions-mode))

  ;; (use-package nano-modeline
  ;;  :hook ((org-agenda-mode . nano-modeline-mode)))
#+end_src
** Line numbers
#+begin_src emacs-lisp
  (global-hl-line-mode 1)

  (add-hook 'prog-mode-hook 'sal-enable-linum)

  (global-linum-mode -1)

  (setq display-line-numbers 'absolute)
#+end_src
** Theme
#+begin_src emacs-lisp
  (defun sal/set-font-faces ()
    (message "[sal] Setting font faces")

    (set-face-attribute 'default nil
                        :font "Source Code Pro" :weight 'regular :height 130)
    ;; (set-face-attribute 'default nil
    ;; :family "Roboto Mono" :weight 'light :height 130)
    (set-face-attribute 'bold nil
                        :family "Roboto Mono" :weight 'regular)
    (set-face-attribute 'italic nil
                        :family "Victor Mono" :weight 'light :slant 'italic)
    (set-fontset-font t 'unicode
                      (font-spec :name "Inconsolata Light" :size 16) nil)
    (set-fontset-font t '(#xe000 . #xffdd)
                      (font-spec :name "RobotoMono Nerd Font" :size 12) nil))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame
                    (sal/set-font-faces))))
    (sal/set-font-faces))

  (setq custom-safe-themes t)

  ;; modus is an emacs provided theme
  ;; (load-theme 'modus-operandi)
  (use-package doom-themes
    :init
    (setq doom-themes-treemacs-theme "doom-colors")
    :config
    (load-theme 'doom-gruvbox t)
    (doom-themes-visual-bell-config))

  (straight-use-package '(nano-theme :type git :host github
                                     :repo "rougier/nano-theme"))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-set-heading-icons t
          dashboard-startup-banner 'logo
          dashboard-center-content nil
          dashboard-set-navigator t
          dashboard-set-file-icons t)
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 5)
                            (projects . 5)))
    (dashboard-setup-startup-hook))

  (add-hook 'dashboard-after-initialize-hook 'air-pop-to-org-agenda)
#+end_src
** Whichkey
#+begin_src emacs-lisp
  (use-package which-key :config (which-key-mode))
#+end_src
** Whitespace
#+begin_src emacs-lisp
  (whitespace-mode)
  (use-package whitespace-cleanup-mode
    :config
    (global-whitespace-cleanup-mode))
#+end_src
* Other settings
#+begin_src emacs-lisp
  ;; Minimal UI
  (scroll-bar-mode -1)
  (tool-bar-mode   -1)
  (tooltip-mode    -1)
  (menu-bar-mode   -1)

  (setq scroll-margin 3) ;; scroll when within 3 lines of top/bottom of visible buffer
  (setq scroll-step 1)   ;; when doing so, scroll one line at a time

  ;; Parentheses
  (show-paren-mode 1)
  (electric-pair-mode 1)

  ;; Which column is this?
  (column-number-mode)

  ;; Where I left off
  (save-place-mode 1)

  (defalias 'yes-or-no-p #'y-or-n-p)
  (setq inhibit-startup-message t)
  (setq backup-directory-alist '(("." . "~/.config/emacs/.saves")))
  (setq create-lockfiles nil)
  (setq auto-save-default nil)

  ;; Formatting
  (setq-default indent-tabs-mode nil)
  (setq-default tab-always-indent t)
  (setq-default indent-line-function 'insert-tab)

  ;; Suppress warnings about cl being deprecated
  (setq byte-compile-warnings '(cl-functions))

  ;; The rest of the init file.

  ;; Make gc pauses faster by decreasing the threshold.
  ;; (setq gc-cons-threshold (* 2 1000 1000))

  ;; The default is 800 kilobytes.  Measured in bytes.
  ;; (setq gc-cons-percentage 0.6)
  ;; (setq gc-cons-threshold most-positive-fixnum)

  (add-hook 'emacs-startup-hook #'sal-display-startup-time)
#+end_src
