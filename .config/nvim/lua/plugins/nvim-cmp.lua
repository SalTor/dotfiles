return {
  -- -- Autocompletion
  -- 'hrsh7th/nvim-cmp',
  -- dependencies = { 'hrsh7th/cmp-nvim-lsp' },
  -- opts = function()
  --   return {
  --     window = {},
  --     sources = {},
  --   }
  -- end,
  -- config = function()
  --   -- [[ Configure nvim-cmp ]]
  --   -- See `:help cmp`
  --   local cmp = require 'cmp'
  --   local luasnip = require 'luasnip'
  --   require('luasnip.loaders.from_vscode').lazy_load { paths = { './snippets' } }
  --   luasnip.config.setup {}
  --
  --   cmp.setup {
  --     window = {
  --       completion = require('cmp').config.window.bordered(),
  --     },
  --     snippet = {
  --       expand = function(args)
  --         luasnip.lsp_expand(args.body)
  --       end,
  --     },
  --     mapping = cmp.mapping.preset.insert {
  --       ['<C-n>'] = cmp.mapping.select_next_item(),
  --       ['<C-p>'] = cmp.mapping.select_prev_item(),
  --       ['<C-d>'] = cmp.mapping.scroll_docs(-4),
  --       ['<C-f>'] = cmp.mapping.scroll_docs(4),
  --       ['<C-Space>'] = cmp.mapping.complete {},
  --       ['<CR>'] = cmp.mapping.confirm {
  --         behavior = cmp.ConfirmBehavior.Replace,
  --         select = true,
  --       },
  --       ['<Tab>'] = cmp.mapping(function(fallback)
  --         if cmp.visible() then
  --           cmp.select_next_item()
  --         elseif luasnip.expand_or_locally_jumpable() then
  --           luasnip.expand_or_jump()
  --         else
  --           fallback()
  --         end
  --       end, { 'i', 's' }),
  --       ['<S-Tab>'] = cmp.mapping(function(fallback)
  --         if cmp.visible() then
  --           cmp.select_prev_item()
  --         elseif luasnip.locally_jumpable(-1) then
  --           luasnip.jump(-1)
  --         else
  --           fallback()
  --         end
  --       end, { 'i', 's' }),
  --     },
  --     sources = {
  --       { name = 'luasnip' },
  --       {
  --         name = 'nvim_lsp',
  --         max_item_count = 20,
  --         entry_filter = function(entry)
  --           return require('cmp').lsp.CompletionItemKind.Snippet ~= entry:get_kind()
  --         end,
  --       },
  --       { name = 'supermaven' },
  --       { name = 'path' },
  --       { name = 'buffer', keyword_length = 4 },
  --     },
  --   }
  --
  --   cmp.setup.filetype({ 'sql' }, {
  --     sources = {
  --       { name = 'vim-dadbod-completion' },
  --       { name = 'buffer' },
  --     },
  --   })
  -- end,
}
