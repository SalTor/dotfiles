"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[ui]
default-command = ["log", "--limit", "8"]
diff-editor = ["nvim", "-c", "DiffEditor $left $right $output"]
pager = "delta"
diff-formatter = ":git"

[user]
name = "saltor"
email = "storcivia@fastgrowingtrees.com"

[defaults]
log.limit = 20

[merge-tools.diffconflicts]
program = "nvim"
merge-args = ["-c", "JJDiffConflicts", "$output"]
merge-tool-edits-conflict-markers = true

[aliases]
# Pull the closest bookmark to where the working copy is
tug = ["bookmark", "move", "--from", "closest_bookmark(@)", "--to", "closest_pushable(@)"]

# 'jj sandwich xyz' to move xyz into the megamerge in parallel to everything
# else. See notes on 'megamerge()' above for how it's resolved.
sandwich = [ "rebase", "-B", "megamerge()", "-A", "trunk()", "-r"]

# Log everything between here and where we forked from trunk
logtag = ["log", "-r", "trunk()..@"]

[revsets]
log = "stack(mine() | @) | trunk() | @"

[revset-aliases]
"immutable_heads()" = "builtin_immutable_heads()"
"why_immutable(r)" = "r | roots(r:: & immutable_heads())"
"closest_bookmark(to)" = "heads(::to & bookmarks())"
"closest_pushable(to)" = "heads(::to & mutable() & ~description(exact:'') & (~empty() | merges()))"
"chunk(x)" = "heads(::x- & bookmarks())..roots(x:: & bookmarks())"

"recent_work" = "ancestors(visible_heads(), 3) & mutable()"
"user(x)" = 'author(x) | committer(x)'

"mine()" = 'user("storcivia@fastgrowingtrees.com") | user("github+0019@saltor.nyc")'

"wip()" = "description(glob-i:'wip:*') | description(glob-i:'[[]WIP[]]*')"
"private()" = "description(glob-i:'private:*') | description(glob-i:'[[]PRIVATE[]]*')"
"blacklist()" = "wip() | private()"

# stack(x, n) is the set of mutable commits reachable from 'x', with 'n'
# parents. 'n' is often useful to customize the display and return set for
# certain operations. 'x' can be used to target the set of 'roots' to traverse,
# e.g. @ is the current stack.
"stack()" = 'stack(@)'
"stack(x)" = 'stack(x, 2)'
"stack(x, n)" = "ancestors(reachable(x, mutable()), n)"

# The current set of "open" works. It is defined as: all stacks that are
# reachable from my working copy, or any other commit I wrote.
# n = 1, meaning that nothing from `trunk()` is included, so all resulting
# commits are mutable by definition.
"open()" = "stack(mine() | @, 1)"

[template-aliases]
'format_short_signature(signature)' = ''
